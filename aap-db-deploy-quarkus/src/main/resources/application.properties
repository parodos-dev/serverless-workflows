# Backstage Notifications service
rhdh_url=${RHDH_URL:https://backstage-backstage.rhdh-operator}
quarkus.rest-client.notifications.url=${rhdh_url}
quarkus.openapi-generator.notifications.auth.BearerToken.bearer-token=${NOTIFICATIONS_BEARER_TOKEN}

# Backstage Scaffolder service
quarkus.rest-client.scaffolder_openapi_yaml.url=${rhdh_url}
quarkus.openapi-generator.scaffolder_openapi_yaml.auth.BearerToken.bearer-token=${SCAFFOLDER_BEARER_TOKEN}
software_template_ref=${SOFTWARE_TEMPLATE_REF:template:default/my-spring-petclinic-template}

# Ansible Automation Platform Settings
app_url=${AAP_URL}
quarkus.rest-client.aap_openapi_yaml.url=${app_url}
quarkus.openapi-generator.aap_openapi_yaml.auth.basicAuth.username=${AAP_USERNAME}
quarkus.openapi-generator.aap_openapi_yaml.auth.basicAuth.password=${AAP_PASSWORD}

quarkus.tls.trust-all=true
quarkus.kubernetes-client.trust-certs=true

# ArgoCD Cluster
quarkus.rest-client.argocd_openapi_yaml.url=${ARGOCD_OCP_API_URL}
quarkus.openapi-generator.argocd_openapi_yaml.auth.BearerToken.bearer-token=${ARGOCD_OCP_API_TOKEN}
quarkus.tls.trust-all=true
quarkus.kubernetes-client.trust-certs=true

# Github
quarkus.rest-client.github_openapi_yaml.url=https://api.github.com
quarkus.openapi-generator.github_openapi_yaml.auth.BearerToken.bearer-token=${GITHUB_TOKEN}

# ArgoCD namespace
target_namespace=${TARGET_ARGOCD_NAMESPACE:spring-petclinic-dev}
target_argocd_project=${TARGET_ARGOCD_PROJECT:default}
target_application_namespace=${TARGET_APPLICATION_PROJECT:orchestrator-gitops}

# Quay
quay_username=${QUAY_USERNAME}
quay_password=${QUAY_PASSWORD}

# AAP Template ID
aap_template_id=${AAP_TEMPLATE_ID:11}

quarkus.log.category."org.apache.http".level=DEBUG

# Kogito runtime persistence configurations
kogito.persistence.type=jdbc
kogito.persistence.proto.marshaller=false
kogito.persistence.query.timeout.millis=10000
quarkus.datasource.db-kind=postgresql
quarkus.flyway.migrate-at-start=true

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres

# Configuration for the incoming cloud events received by the serverless workflows.
mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/
mp.messaging.incoming.kogito_incoming_stream.method=POST

# Configuration for the helper class EventsProducerResource that send events to the waiting serverless workflows.
mp.messaging.outgoing.response_events.connector=quarkus-http
mp.messaging.outgoing.response_events.url=${K_SINK:${kogito.service.url}}
mp.messaging.outgoing.response_events.method=POST

quarkus.kogito.devservices.enabled=false 
quarkus.kogito.data-index.graphql.ui.always-include=true