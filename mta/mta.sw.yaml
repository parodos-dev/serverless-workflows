specVersion: "0.8"
id: MTAAnalysis
name: MTA Analysis
description: Workflow to execute MTA Analysis
annotations:
  - "workflow-type/assessment"
version: "1.0"
timeouts:
  workflowExecTimeout:
    duration: PT1H
start: GetApplication
dataInputSchema:
  schema: specs/mta-input.json
  failOnValidationErrors: false
extensions:
  - extensionid: workflow-uri-definitions
    definitions:
      notifications: "https://raw.githubusercontent.com/janus-idp/backstage-plugins/%40janus-idp/plugin-notifications-backend%401.0.3/plugins/notifications-backend/src/openapi.yaml"
functions:
  - name: filterApplication
    type: expression
    operation: "{application: .applications|map(select(.repository.url == .repositoryURL))[0]}"
  - name: getApplication
    operation: specs/mta.json#getApplications
  - name: createApplication
    operation: specs/mta.json#createApplication
  - name: createTaskgroup
    operation: specs/mta.json#createTaskgroup
  - name: submitTaskgroup
    operation: specs/mta.json#submitTaskgroup
  - name: getTaskgroup
    operation: specs/mta.json#getTaskgroup
  - name: createNotification
    operation: notifications#createNotification
states:
  - name: GetApplication
    type: operation
    actionMode: sequential
    actions:
      - name: getApp
        functionRef: getApplication
        actionDataFilter:
          toStateData: ".applications"
    stateDataFilter:
      output: "{backstageUser: .backstageUser, backstageGroup: .backstageGroup, repositoryURL: .repositoryURL, application: .repositoryURL as $r| if .applications == null then null else .applications|map(select(.repository.url == $r))[0] end}"
    transition: AppExist
  - name: AppExist
    type: switch
    dataConditions:
      - condition: ".application != null"
        transition:
          nextState: CreateTaskgroup
    defaultCondition:
      transition: CreateApplication
  - name: CreateApplication
    type: operation
    actions:
      - name: createApplication
        actionDataFilter:
          toStateData: ".application"
        functionRef:
          refName: createApplication
          arguments:
            name: ".repositoryURL"
            repository:
              url: ".repositoryURL"
              kind: git
    transition: CreateTaskgroup
  - name: CreateTaskgroup
    type: operation
    actionMode: sequential
    actions:
      - name: createTaskgroup
        actionDataFilter:
          toStateData: ".taskgroup"
        functionRef:
          refName: createTaskgroup
          arguments:
            name: taskgroup.windup
            addon: windup
            tasks:
              - name: parodos.windup
                application:
                  id: ".application.id"
            data:
              output: "/windup/report"
              mode:
                binary: false
                diva: false
                withDeps: false
              rules:
                labels:
                  - "konveyor.io/target=cloud-readiness"
                rulesets:
                  - id: 2
                    name: Containerization
                path: ''
              scope:
                withKnown: false
              sources: [ ]
              targets:
                - cloud-readiness
    transition: SubmitAnalysis
  - name: SubmitAnalysis
    type: operation
    actionMode: sequential
    actions:
      - name: submitTaskgroup
        functionRef:
          refName: submitTaskgroup
          arguments:
            id: ".taskgroup.id"
            data: ".taskgroup.data"
            tasks: ".taskgroup.tasks"
            addon: windup
            createUser: admin.noauth
    transition: GetAnalysis
  - name: GetAnalysis
    type: operation
    actionMode: sequential
    actions:
      - name: getTaskgroup
        functionRef:
          refName: getTaskgroup
          arguments:
            id: ".taskgroup.id"
        actionDataFilter:
          toStateData: ".taskgroup"
    transition: poll
  - actions:
      - functionRef:
          refName: getTaskgroup
          arguments:
            id: ".taskgroup.id"
        actionDataFilter:
          toStateData: ".taskgroup"
        sleep:
          before: PT2S
    name: poll
    type: operation
    transition: checkReportDone
  - name: checkReportDone
    type: switch
    dataConditions:
      - condition: (.taskgroup.state == "Ready" and .taskgroup.tasks[0].state == "Succeeded")
        transition: NotifyBackstage
      - condition: (.taskgroup.state == "Ready" and .taskgroup.tasks[0].state == "Failed")
        transition: NotifyFailureBackstage
    defaultCondition:
      transition: poll
    transition: NotifyBackstage
  - name: NotifyBackstage
    type: operation
    actions:
      - condition: .backstageUser != null or .backstageGroup != null
        functionRef:
          refName: createNotification
          arguments:
            title: "MTA analysis completed"
            message: '"MTA analysis is completed and the report for " + .application.repository.url + " is ready."'
            origin: "MTA Analysis Workflow"
            topic: "MTA Analysis Workflow"
            targetUsers: if .backstageUser != null then [.backstageUser] else [] end
            targetGroups: if .backstageGroup != null then [.backstageGroup] else [] end
            actions:
              - title: "View report"
                url: "$SECRET.mta.url + \"/hub/applications/\" + (.application.id|tostring) + \"/bucket/\" + .data.output"
    transition: report
  - name: report
    type: operation
    stateDataFilter:
      output: '{result: (.taskgroup.tasks[0]| "report will be ready here -> " + $SECRET.mta.url + "/hub/applications/" + (.application.id|tostring) + "/bucket" + .data.output), repositoryURL: .repositoryURL}'
    transition: GetWorkflowOptions
  - name: GetWorkflowOptions
    type: operation
    stateDataFilter:
      output: '{workflowOptions: {migrationOptions: [{id: "m2k", name: "Move2Kube workflow"}]}, repositoryURL: .repositoryURL}'
    end: true
  - name: NotifyFailureBackstage
    type: operation
    actions:
      - condition: .backstageUser != null or .backstageGroup != null
        functionRef:
          refName: createNotification
          arguments:
            title: "MTA analysis failed"
            message: '"MTA analysis for " + .application.repository.url + " failed. Check logs of task pod: " + .taskgroup.tasks[0].pod'
            origin: "MTA Analysis Workflow"
            topic: "MTA Analysis Workflow"
            targetUsers: if .backstageUser != null then [.backstageUser] else [] end
            targetGroups: if .backstageGroup != null then [.backstageGroup] else [] end
    end: true

