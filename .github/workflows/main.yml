name: Reusable Workflow Building Container Images and Manifests

on:
  workflow_call:
    inputs:
      workflow_id:
        required: true
        type: string
      it_mode:
        type: boolean
        default: false

env:
  WF_CONFIG_REPO: parodos-dev/serverless-workflows-config

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    - name: Log in to Red Hat Registry
      uses: redhat-actions/podman-login@v1
      if: ${{ ! inputs.it_mode }}
      with:
        registry: registry.redhat.io
        username: ${{ secrets.REGISTRY_REDHAT_IO_USER }}
        password: ${{ secrets.REGISTRY_REDHAT_IO_PASSWORD }}

    - name: Buildah Action
      id: build-image
      uses: redhat-actions/buildah-build@v2
      if: ${{ ! inputs.it_mode }}
      with:
        image: serverless-workflow-${{ inputs.workflow_id }}
        tags: latest ${{ github.sha }}
        extra-args: --ulimit nofile=4096:4096
        containerfiles: |
          pipeline/workflow-builder.Dockerfile
        build-args: |
          WF_RESOURCES=${{ inputs.workflow_id }}/
          MAVEN_ARGS_APPEND=-Dkogito.persistence.type=jdbc -Dquarkus.datasource.db-kind=postgresql -Dkogito.persistence.proto.marshaller=false
          QUARKUS_EXTENSIONS=org.kie.kogito:kogito-addons-quarkus-jobs-knative-eventing:9.99.1.redhat-00003,org.kie.kogito:kogito-addons-quarkus-persistence-jdbc:9.99.1.redhat-00003,org.kie.kogito:kogito-addons-persistence-jdbc:9.99.1.redhat-00003,io.quarkus:quarkus-jdbc-postgresql:3.2.9.Final,io.quarkus:quarkus-agroal:3.2.9.Final

    - name: Buildah Action for testing
      id: build-dev-image
      uses: redhat-actions/buildah-build@v2
      if: ${{ inputs.it_mode }}
      with:
        image: serverless-workflow-${{ inputs.workflow_id }}
        tags: latest ${{ github.sha }}
        extra-args: --ulimit nofile=4096:4096
        containerfiles: |
          pipeline/workflow-builder-dev.Dockerfile
        build-args: |
          WF_RESOURCES=${{ inputs.workflow_id }}/
          MAVEN_ARGS_APPEND=
          QUARKUS_EXTENSIONS=

    - name: Buildah push to OCI Arcive
      if: ${{ inputs.it_mode }}
      run: |
        buildah push serverless-workflow-${{ inputs.workflow_id }}:${{ github.sha }} \
          oci-archive:serverless-workflow-${{ inputs.workflow_id }}-${{ github.sha }}.tar:quay.io/orchestrator/serverless-workflow-${{ inputs.workflow_id }}:${{ github.sha }}
    - name: Save OCI archive
      if: ${{ inputs.it_mode }}
      uses: actions/upload-artifact@v3
      with:
        name: serverless-workflow-${{ inputs.workflow_id }}-${{ github.sha }}.tar
        path: serverless-workflow-${{ inputs.workflow_id }}-${{ github.sha }}.tar

    - name: Push To quay.io
      id: push-to-quay
      if: ${{ ! inputs.it_mode }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: quay.io/orchestrator
        username: ${{ secrets.NEW_QUAY_USERNAME }}
        password: ${{ secrets.NEW_QUAY_PASSWORD }}

    - name: Print image url
      run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

  generate-manifests:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v3

    - name: Add auto DB migration in props
      run: echo -e "\nquarkus.flyway.migrate-at-start=true" >> ${{ inputs.workflow_id }}/application.properties

    - name: Setup kn-workflow
      run: |
          KN_CLI_URL="https://mirror.openshift.com/pub/openshift-v4/clients/serverless/latest/kn-linux-amd64.tar.gz"
          curl -L "$KN_CLI_URL" | tar -xz && chmod +x kn-linux-amd64 && mv kn-linux-amd64 kn

    - name: Use kn-workflow to generate manifests
      run: cd ${{ inputs.workflow_id }} && ../kn workflow gen-manifest --namespace ""

    - name: Set prod profile
      run: yq --inplace eval '.metadata.annotations["sonataflow.org/profile"] = "prod"' ${{ inputs.workflow_id }}/manifests/01-sonataflow*.yaml

    - name: Set container image ref in SonataFlow resource
      run: yq --inplace '.spec.podTemplate.container.image="quay.io/orchestrator/serverless-workflow-${{ inputs.workflow_id }}:${{ github.sha }}"' ${{ inputs.workflow_id }}/manifests/01-sonataflow*.yaml

    - name: Set persistence spec in SonataFlow resource
      run: |
        yq --inplace '.spec |= (
          . + {
            "persistence": {
              "postgresql": {
                "secretRef": {
                  "name": "sonataflow-psql-postgresql",
                  "userKey": "postgres-username",
                  "passwordKey": "postgres-password"
                },
                "serviceRef": {
                  "name": "sonataflow-psql-postgresql",
                  "port": 5432,
                  "databaseName": "sonataflow",
                  "databaseSchema": "${{ inputs.workflow_id }}"
                }
              }
            }
          }
        )' ${{ inputs.workflow_id }}/manifests/01-sonataflow*.yaml

    - name: Archive manifests
      uses: actions/upload-artifact@v3
      with:
        name: serverless-workflow-${{ inputs.workflow_id }}-manifests
        path: ${{ inputs.workflow_id }}/manifests

    - uses: actions/github-script@v7
      id: get_pr_data
      with:
        script: |
          return (
            await github.rest.repos.listPullRequestsAssociatedWithCommit({
              commit_sha: context.sha,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
          ).data[0];

    - name: Send PRs to config repo
      if: ${{ ! inputs.it_mode }}
      env:
        GH_TOKEN: ${{ secrets.HELM_REPO_TOKEN }}
      run: |
          git config --global user.email "${{ github.event.head_commit.author.email || 'parodos@redhat.com' }}"
          git config --global user.name ${{ github.event.head_commit.author.name || github.triggering_actor }}
          gh repo clone $WF_CONFIG_REPO config-repo
          cd config-repo
          git switch -c ${{ inputs.workflow_id }}-autopr-$RANDOM

          ./hack/bump_chart_version.sh ${{ inputs.workflow_id }} --bump-patch-version

          mkdir -p charts/${{ inputs.workflow_id }}/templates
          cp ../${{ inputs.workflow_id }}/manifests/* charts/${{ inputs.workflow_id }}/templates
          git add -A

          # determine pr or commit url
          if [ ${{ fromJSON(steps.get_pr_data.outputs.result)}} != "" ]; then
            PR_OR_COMMIT_URL="${{ fromJSON(steps.get_pr_data.outputs.result).html_url }}"
          else
            PR_OR_COMMIT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi

          git commit -m "(${{ inputs.workflow_id }}) Automated PR"
          echo "Automated PR from $PR_OR_COMMIT_URL" | git commit --amend --file=-
          git remote set-url origin https://${{ env.GH_TOKEN }}@github.com/$WF_CONFIG_REPO
          git push origin HEAD
          gh pr create -f --title "${{ inputs.workflow_id }}: Automatic manifests generation" \
            --body "
          Updating generated manifests for ${{ inputs.workflow_id }} workflow
 
          This PR was created automatically as a result of merging $PR_OR_COMMIT_URL
          "
