  openapi: 3.0.0
  info:
    title: Kubernetes
    version: v1.27.3
  paths:

    /api/v1/namespaces:
      get:
        tags:
          - core_v1
        description: list or watch objects of kind Namespace
        operationId: listCoreV1Namespace
        parameters:
          - name: allowWatchBookmarks
            in: query
            description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
            schema:
              type: boolean
              uniqueItems: true
          - name: continue
            in: query
            description: |-
              The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
  
              This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
            schema:
              type: string
              uniqueItems: true
          - name: fieldSelector
            in: query
            description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
            schema:
              type: string
              uniqueItems: true
          - name: labelSelector
            in: query
            description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
            schema:
              type: string
              uniqueItems: true
          - name: limit
            in: query
            description: |-
              limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
  
              The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
            schema:
              type: integer
              uniqueItems: true
          - name: resourceVersion
            in: query
            description: |-
              resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
  
              Defaults to unset
            schema:
              type: string
              uniqueItems: true
          - name: resourceVersionMatch
            in: query
            description: |-
              resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
  
              Defaults to unset
            schema:
              type: string
              uniqueItems: true
          - name: sendInitialEvents
            in: query
            description: |-
              `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
  
              When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
                is interpreted as "data at least as new as the provided `resourceVersion`"
                and the bookmark event is send when the state is synced
                to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
                If `resourceVersion` is unset, this is interpreted as "consistent read" and the
                bookmark event is send when the state is synced at least to the moment
                when request started being processed.
              - `resourceVersionMatch` set to any other value or unset
                Invalid error is returned.
  
              Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
            schema:
              type: boolean
              uniqueItems: true
          - name: timeoutSeconds
            in: query
            description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
            schema:
              type: integer
              uniqueItems: true
          - name: watch
            in: query
            description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
            schema:
              type: boolean
              uniqueItems: true
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
              application/json;stream=watch:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
              application/vnd.kubernetes.protobuf:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
              application/vnd.kubernetes.protobuf;stream=watch:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
              application/yaml:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
          "401":
            description: Unauthorized
        x-kubernetes-action: list
        x-kubernetes-group-version-kind:
          group: ""
          version: v1
          kind: Namespace
        security:
          - BearerToken: []
      post:
        tags:
          - core_v1
        description: create a Namespace
        operationId: createCoreV1Namespace
        parameters:
          - name: dryRun
            in: query
            description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
            schema:
              type: string
              uniqueItems: true
          - name: fieldManager
            in: query
            description: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
            schema:
              type: string
              uniqueItems: true
          - name: fieldValidation
            in: query
            description: 'fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.'
            schema:
              type: string
              uniqueItems: true
        requestBody:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
              application/vnd.kubernetes.protobuf:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
              application/yaml:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          "201":
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
              application/vnd.kubernetes.protobuf:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
              application/yaml:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          "202":
            description: Accepted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
              application/vnd.kubernetes.protobuf:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
              application/yaml:
                schema:
                  $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          "401":
            description: Unauthorized
        x-kubernetes-action: post
        x-kubernetes-group-version-kind:
          group: ""
          version: v1
          kind: Namespace
        security:
          - BearerToken: [ ]
      parameters:
        - name: pretty
          in: query
          description: If 'true', then the output is pretty printed.
          schema:
            type: string
            uniqueItems: true

  components:
    schemas:
      io.k8s.apimachinery.pkg.apis.meta.v1.Time:
        description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        type: string
        format: date-time
      io.k8s.api.core.v1.Namespace:
        description: Namespace provides a scope for Names. Use of multiple namespaces is optional.
        type: object
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
            default:
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
          spec:
            description: 'Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
            default:
            allOf:
              - $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceSpec'
          status:
            description: 'Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
            default:
            allOf:
              - $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceStatus'
        x-kubernetes-group-version-kind:
          - group: ""
            kind: Namespace
            version: v1
      io.k8s.api.core.v1.NamespaceCondition:
        description: NamespaceCondition contains details about state of namespace.
        type: object
        required:
          - type
          - status
        properties:
          lastTransitionTime:
            default:
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          message:
            type: string
          reason:
            type: string
          status:
            description: Status of the condition, one of True, False, Unknown.
            type: string
            default: ""
          type:
            description: Type of namespace controller condition.
            type: string
            default: ""
      io.k8s.api.core.v1.NamespaceList:
        description: NamespaceList is a list of Namespaces.
        type: object
        required:
          - items
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          items:
            description: 'Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
            type: array
            items:
              default:
              allOf:
                - $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            default:
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        x-kubernetes-group-version-kind:
          - group: ""
            kind: NamespaceList
            version: v1
      io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
        description: ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
        type: object
        properties:
          continue:
            description: continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
            type: string
          remainingItemCount:
            description: remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
            type: integer
            format: int64
          resourceVersion:
            description: 'String that identifies the server''s internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
            type: string
          selfLink:
            description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
            type: string
      io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
        description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
        type: object
        properties:
          apiVersion:
            description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
            type: string
          fieldsType:
            description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
            type: string
          fieldsV1:
            description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
          manager:
            description: Manager is an identifier of the workflow managing these fields.
            type: string
          operation:
            description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
            type: string
          subresource:
            description: Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
            type: string
          time:
            description: Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
        description: |-
          FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

          Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

          The exact format is defined in sigs.k8s.io/structured-merge-diff
        type: object

      io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
        description: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
        type: object
        properties:
          annotations:
            description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations'
            type: object
            additionalProperties:
              type: string
              default: ""
          creationTimestamp:
            description: |-
              CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  
              Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            default:
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          deletionGracePeriodSeconds:
            description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
            type: integer
            format: int64
          deletionTimestamp:
            description: |-
              DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
  
              Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            allOf:
              - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          finalizers:
            description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
            type: array
            items:
              type: string
              default: ""
            x-kubernetes-patch-strategy: merge
          generateName:
            description: |-
              GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
  
              If this field is specified and the generated name exists, the server will return a 409.
  
              Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
            type: string
          generation:
            description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
            type: integer
            format: int64
          labels:
            description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels'
            type: object
            additionalProperties:
              type: string
              default: ""
          managedFields:
            description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
            type: array
            items:
              default:
              allOf:
                - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
          name:
            description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names'
            type: string
          namespace:
            description: |-
              Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  
              Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
            type: string
          ownerReferences:
            description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
            type: array
            items:
              default:
              allOf:
                - $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
            x-kubernetes-patch-merge-key: uid
            x-kubernetes-patch-strategy: merge
          resourceVersion:
            description: |-
              An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  
              Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            type: string
          selfLink:
            description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
            type: string
          uid:
            description: |-
              UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  
              Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            type: string

      io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
        description: OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
        type: object
        required:
          - apiVersion
          - kind
          - name
          - uid
        properties:
          apiVersion:
            description: API version of the referent.
            type: string
            default: ""
          blockOwnerDeletion:
            description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
            type: boolean
          controller:
            description: If true, this reference points to the managing controller.
            type: boolean
          kind:
            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
            default: ""
          name:
            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names'
            type: string
            default: ""
          uid:
            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids'
            type: string
            default: ""
        x-kubernetes-map-type: atomic

      io.k8s.api.core.v1.NamespaceSpec:
        description: NamespaceSpec describes the attributes on a Namespace.
        type: object
        properties:
          finalizers:
            description: 'Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/'
            type: array
            items:
              type: string
              default: ""
      io.k8s.api.core.v1.NamespaceStatus:
        description: NamespaceStatus is information about the current status of a Namespace.
        type: object
        properties:
          conditions:
            description: Represents the latest available observations of a namespace's current state.
            type: array
            items:
              default:
              allOf:
                - $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceCondition'
            x-kubernetes-patch-merge-key: type
            x-kubernetes-patch-strategy: merge
          phase:
            description: |-
              Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
  
              Possible enum values:
               - `"Active"` means the namespace is available for use in the system
               - `"Terminating"` means the namespace is undergoing graceful termination
            type: string
            enum:
              - Active
              - Terminating

    securitySchemes:
      BearerToken:
        type: http
        scheme: bearer
        description: Bearer Token authentication
