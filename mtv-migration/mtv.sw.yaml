specVersion: "0.8"
id: mtv-migration
version: '1.0'
name: MTV migration workflow
description: workflow executes a plan by creating a migration and waiting for it to be successful or failed
annotations:
  - "workflow-type/infrastructure"
dataInputSchema: schemas/mtv-input.json
extensions:
  - extensionid: workflow-output-schema
    outputSchema: schemas/workflow-output-schema.json
  - extensionid: workflow-uri-definitions
    definitions:
      notifications: "https://raw.githubusercontent.com/parodos-dev/serverless-workflows/main/shared/specs/notifications-openapi.yaml"
start: CreateMigration
functions:
  - name: createNotification
    operation: notifications#createNotification
  - name: createMigration
    type: rest
    operation: 'specs/mtv.yaml#createMigration'
  - name: getMigration
    type: rest
    operation: 'specs/mtv.yaml#getMigration'
  - name: getMigrationError
    type: expression
    operation: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical" or .type == "Failed"))[0].message
  - name: successResult
    type: expression
    operation: '{
        "result": {
          "completedWith":"success",
          "message": "MTV migration " + .migrationName + " succeeded",
          "outputs":[]
        }
      }'
  - name: errorResult
    type: expression
    operation: '{
        "result": {
          "completedWith":"error",
          "message": "MTV migration " + .migrationName + " failed.",
          "outputs":[
            {
                "key":"Error",
                "value": .migrationErrorMessage
            }
          ]
        }
      }'
states:
  - name: CreateMigration
    type: operation
    actions:
      - functionRef:
          refName: createMigration
          arguments:
            namespace: .migrationNamespace
            apiVersion: "forklift.konveyor.io/v1beta1"
            kind: Migration
            metadata:
              name: .migrationName
              namespace: .migrationNamespace
            spec:
              plan:
                name: .migrationName
                namespace: .migrationNamespace
    transition: GetMigration
  - name: GetMigration
    type: operation
    actions:
      - name: getMigration
        actionDataFilter:
          toStateData: .getStatusResult
        functionRef:
          refName: getMigration
          arguments:
            namespace: .migrationNamespace
            migration: .migrationName
        sleep:
          before: PT10S
    transition: CheckMigrationStatus
  - name: CheckMigrationStatus
    type: switch
    dataConditions:
      - name: MigrationFailure
        condition: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical" or .type == "Failed")) | length > 0
        transition: MigrationFailure
      - name: MigrationSuccessful
        condition: .getStatusResult.status.conditions | map(select(.type == "Succeeded")) | length > 0
        transition: MigrationSuccessful
    defaultCondition:
      transition:
        nextState: GetMigration
  - name: MigrationFailure
    type: operation
    actions:
      - name: setMigrationErrorMessage
        actionDataFilter:
          toStateData: .migrationErrorMessage
        functionRef:
          refName: getMigrationError
      - name: createNotification
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: "MTV migration failed"
              description: '"MTV migration " + .migrationName + " failed. Error: " + .migrationErrorMessage'
              topic: "MTV migration workflow"
              severity: "critical"
      - name: setOutput
        functionRef:
          refName: errorResult
    end: true
  - name: MigrationSuccessful
    type: operation
    actions:
      - name: createNotification
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: "MTV migration successful"
              description: '"MTV migration " + .migrationName + " succeeded"'
              topic: "MTV migration workflow"
              severity: "normal"
      - name: setOutput
        functionRef:
          refName: successResult
    end: true