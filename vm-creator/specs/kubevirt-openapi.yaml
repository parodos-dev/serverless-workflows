openapi: 3.0.1
info:
  version: 1.2.0
  title: KubeVirt API
  description: This is KubeVirt API an add-on for Kubernetes.
  contact:
    name: kubevirt-dev
    url: https://github.com/kubevirt/kubevirt
    email: kubevirt-dev@googlegroups.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
- url: /
paths:
  /apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines:
    post:
      description: Create a VirtualMachine object.
      operationId: createNamespacedVirtualMachine
      parameters:
      - name: namespace
        in: path
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.VirtualMachine'
          application/yaml:
            schema:
              $ref: '#/components/schemas/v1.VirtualMachine'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
            application/yaml:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
            application/yaml:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
            application/yaml:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
      x-codegen-request-body-name: body
      security:
          - BearerToken: []
  /apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}:
    get:
      description: Get a VirtualMachine object.
      operationId: readNamespacedVirtualMachine
      parameters:
      - name: name
        in: path
        description: Name of the resource
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        schema:
          type: string
      - name: exact
        in: query
        description: Should the export be exact. Exact export maintains cluster-specific
          fields like 'Namespace'.
        schema:
          type: boolean
      - name: export
        in: query
        description: Should this value be exported. Export strips fields that a user
          can not specify.
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
            application/yaml:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/v1.VirtualMachine'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
            application/json;stream=watch:
              schema:
                type: string
      security:
          - BearerToken: []
components:
  schemas:
    k8s.io.api.core.v1.Affinity:
      type: object
      properties:
        nodeAffinity:
          $ref: '#/components/schemas/k8s.io.api.core.v1.NodeAffinity'
        podAffinity:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PodAffinity'
        podAntiAffinity:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PodAntiAffinity'
      description: Affinity is a group of affinity scheduling rules.
    k8s.io.api.core.v1.DownwardAPIVolumeFile:
      required:
      - path
      type: object
      properties:
        fieldRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ObjectFieldSelector'
        mode:
          type: integer
          description: "Optional: mode bits used to set permissions on this file,\
            \ must be an octal value between 0000 and 0777 or a decimal value between\
            \ 0 and 511. YAML accepts both octal and decimal values, JSON requires\
            \ decimal values for mode bits. If not specified, the volume defaultMode\
            \ will be used. This might be in conflict with other options that affect\
            \ the file mode, like fsGroup, and the result can be other mode bits set."
          format: int32
        path:
          type: string
          description: "Required: Path is  the relative path name of the file to be\
            \ created. Must not be absolute or contain the '..' path. Must be utf-8\
            \ encoded. The first item of the relative path must not start with '..'"
          default: ""
        resourceFieldRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ResourceFieldSelector'
      description: DownwardAPIVolumeFile represents information to create the file
        containing the pod field
    k8s.io.api.core.v1.ExecAction:
      type: object
      properties:
        command:
          type: array
          description: "Command is the command line to execute inside the container,\
            \ the working directory for the command  is root ('/') in the container's\
            \ filesystem. The command is simply exec'd, it is not run inside a shell,\
            \ so traditional shell instructions ('|', etc) won't work. To use a shell,\
            \ you need to explicitly call out to that shell. Exit status of 0 is treated\
            \ as live/healthy and non-zero is unhealthy."
          items:
            type: string
            default: ""
      description: ExecAction describes a "run in container" action.
    k8s.io.api.core.v1.HTTPGetAction:
      type: object
      properties:
        host:
          type: string
          description: "Host name to connect to, defaults to the pod IP. You probably\
            \ want to set \"Host\" in httpHeaders instead."
        httpHeaders:
          type: array
          description: Custom headers to set in the request. HTTP allows repeated
            headers.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.HTTPHeader'
        path:
          type: string
          description: Path to access on the HTTP server.
        scheme:
          type: string
          description: |-
            Scheme to use for connecting to the host. Defaults to HTTP.

            Possible enum values:
             - `"HTTP"` means that the scheme used will be http://
             - `"HTTPS"` means that the scheme used will be https://
          enum:
          - HTTP
          - HTTPS
      description: HTTPGetAction describes an action based on HTTP Get requests.
    k8s.io.api.core.v1.HTTPHeader:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The header field name
          default: ""
        value:
          type: string
          description: The header field value
          default: ""
      description: HTTPHeader describes a custom header to be used in HTTP probes
    k8s.io.api.core.v1.LocalObjectReference:
      type: object
      properties:
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
      description: LocalObjectReference contains enough information to let you locate
        the referenced object inside the same namespace.
      x-kubernetes-map-type: atomic
    k8s.io.api.core.v1.NodeAffinity:
      type: object
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "The scheduler will prefer to schedule pods to nodes that satisfy\
            \ the affinity expressions specified by this field, but it may choose\
            \ a node that violates one or more of the expressions. The node that is\
            \ most preferred is the one with the greatest sum of weights, i.e. for\
            \ each node that meets all of the scheduling requirements (resource request,\
            \ requiredDuringScheduling affinity expressions, etc.), compute a sum\
            \ by iterating through the elements of this field and adding \"weight\"\
            \ to the sum if the node matches the corresponding matchExpressions; the\
            \ node(s) with the highest sum are the most preferred."
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.PreferredSchedulingTerm'
        requiredDuringSchedulingIgnoredDuringExecution:
          $ref: '#/components/schemas/k8s.io.api.core.v1.NodeSelector'
      description: Node affinity is a group of node affinity scheduling rules.
    k8s.io.api.core.v1.NodeSelector:
      required:
      - nodeSelectorTerms
      type: object
      properties:
        nodeSelectorTerms:
          type: array
          description: Required. A list of node selector terms. The terms are ORed.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.NodeSelectorTerm'
      description: "A node selector represents the union of the results of one or\
        \ more label queries over a set of nodes; that is, it represents the OR of\
        \ the selectors represented by the node selector terms."
      x-kubernetes-map-type: atomic
    k8s.io.api.core.v1.NodeSelectorRequirement:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: The label key that the selector applies to.
          default: ""
        operator:
          type: string
          description: |-
            Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

            Possible enum values:
             - `"DoesNotExist"`
             - `"Exists"`
             - `"Gt"`
             - `"In"`
             - `"Lt"`
             - `"NotIn"`
          default: ""
          enum:
          - DoesNotExist
          - Exists
          - Gt
          - In
          - Lt
          - NotIn
        values:
          type: array
          description: "An array of string values. If the operator is In or NotIn,\
            \ the values array must be non-empty. If the operator is Exists or DoesNotExist,\
            \ the values array must be empty. If the operator is Gt or Lt, the values\
            \ array must have a single element, which will be interpreted as an integer.\
            \ This array is replaced during a strategic merge patch."
          items:
            type: string
            default: ""
      description: "A node selector requirement is a selector that contains values,\
        \ a key, and an operator that relates the key and values."
    k8s.io.api.core.v1.NodeSelectorTerm:
      type: object
      properties:
        matchExpressions:
          type: array
          description: A list of node selector requirements by node's labels.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.NodeSelectorRequirement'
        matchFields:
          type: array
          description: A list of node selector requirements by node's fields.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.NodeSelectorRequirement'
      description: A null or empty node selector term matches no objects. The requirements
        of them are ANDed. The TopologySelectorTerm type implements a subset of the
        NodeSelectorTerm.
      x-kubernetes-map-type: atomic
    k8s.io.api.core.v1.ObjectFieldSelector:
      required:
      - fieldPath
      type: object
      properties:
        apiVersion:
          type: string
          description: "Version of the schema the FieldPath is written in terms of,\
            \ defaults to \"v1\"."
        fieldPath:
          type: string
          description: Path of the field to select in the specified API version.
          default: ""
      description: ObjectFieldSelector selects an APIVersioned field of an object.
      x-kubernetes-map-type: atomic
    k8s.io.api.core.v1.PersistentVolumeClaimSpec:
      type: object
      properties:
        accessModes:
          type: array
          description: "accessModes contains the desired access modes the volume should\
            \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
          items:
            type: string
            default: ""
        dataSource:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
        dataSourceRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedObjectReference'
        resources:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ResourceRequirements'
        selector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        storageClassName:
          type: string
          description: "storageClassName is the name of the StorageClass required\
            \ by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        volumeMode:
          type: string
          description: |-
            volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.

            Possible enum values:
             - `"Block"` means the volume will not be formatted with a filesystem and will remain a raw block device.
             - `"Filesystem"` means the volume will be or is formatted with a filesystem.
          enum:
          - Block
          - Filesystem
        volumeName:
          type: string
          description: volumeName is the binding reference to the PersistentVolume
            backing this claim.
      description: PersistentVolumeClaimSpec describes the common attributes of storage
        devices and allows a Source for provider-specific attributes
    k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource:
      required:
      - claimName
      type: object
      properties:
        claimName:
          type: string
          description: "claimName is the name of a PersistentVolumeClaim in the same\
            \ namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
          default: ""
        readOnly:
          type: boolean
          description: readOnly Will force the ReadOnly setting in VolumeMounts. Default
            false.
      description: "PersistentVolumeClaimVolumeSource references the user's PVC in\
        \ the same namespace. This volume finds the bound PV and mounts that volume\
        \ for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper\
        \ around another type of volume that is owned by someone else (the system)."
    k8s.io.api.core.v1.PodAffinity:
      type: object
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "The scheduler will prefer to schedule pods to nodes that satisfy\
            \ the affinity expressions specified by this field, but it may choose\
            \ a node that violates one or more of the expressions. The node that is\
            \ most preferred is the one with the greatest sum of weights, i.e. for\
            \ each node that meets all of the scheduling requirements (resource request,\
            \ requiredDuringScheduling affinity expressions, etc.), compute a sum\
            \ by iterating through the elements of this field and adding \"weight\"\
            \ to the sum if the node has pods which matches the corresponding podAffinityTerm;\
            \ the node(s) with the highest sum are the most preferred."
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.WeightedPodAffinityTerm'
        requiredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "If the affinity requirements specified by this field are not\
            \ met at scheduling time, the pod will not be scheduled onto the node.\
            \ If the affinity requirements specified by this field cease to be met\
            \ at some point during pod execution (e.g. due to a pod label update),\
            \ the system may or may not try to eventually evict the pod from its node.\
            \ When there are multiple elements, the lists of nodes corresponding to\
            \ each podAffinityTerm are intersected, i.e. all terms must be satisfied."
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.PodAffinityTerm'
      description: Pod affinity is a group of inter pod affinity scheduling rules.
    k8s.io.api.core.v1.PodAffinityTerm:
      required:
      - topologyKey
      type: object
      properties:
        labelSelector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        namespaceSelector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        namespaces:
          type: array
          description: namespaces specifies a static list of namespace names that
            the term applies to. The term is applied to the union of the namespaces
            listed in this field and the ones selected by namespaceSelector. null
            or empty namespaces list and null namespaceSelector means "this pod's
            namespace".
          items:
            type: string
            default: ""
        topologyKey:
          type: string
          description: "This pod should be co-located (affinity) or not co-located\
            \ (anti-affinity) with the pods matching the labelSelector in the specified\
            \ namespaces, where co-located is defined as running on a node whose value\
            \ of the label with key topologyKey matches that of any node on which\
            \ any of the selected pods is running. Empty topologyKey is not allowed."
          default: ""
      description: "Defines a set of pods (namely those matching the labelSelector\
        \ relative to the given namespace(s)) that this pod should be co-located (affinity)\
        \ or not co-located (anti-affinity) with, where co-located is defined as running\
        \ on a node whose value of the label with key <topologyKey> matches that of\
        \ any node on which a pod of the set of pods is running"
    k8s.io.api.core.v1.PodAntiAffinity:
      type: object
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "The scheduler will prefer to schedule pods to nodes that satisfy\
            \ the anti-affinity expressions specified by this field, but it may choose\
            \ a node that violates one or more of the expressions. The node that is\
            \ most preferred is the one with the greatest sum of weights, i.e. for\
            \ each node that meets all of the scheduling requirements (resource request,\
            \ requiredDuringScheduling anti-affinity expressions, etc.), compute a\
            \ sum by iterating through the elements of this field and adding \"weight\"\
            \ to the sum if the node has pods which matches the corresponding podAffinityTerm;\
            \ the node(s) with the highest sum are the most preferred."
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.WeightedPodAffinityTerm'
        requiredDuringSchedulingIgnoredDuringExecution:
          type: array
          description: "If the anti-affinity requirements specified by this field\
            \ are not met at scheduling time, the pod will not be scheduled onto the\
            \ node. If the anti-affinity requirements specified by this field cease\
            \ to be met at some point during pod execution (e.g. due to a pod label\
            \ update), the system may or may not try to eventually evict the pod from\
            \ its node. When there are multiple elements, the lists of nodes corresponding\
            \ to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.PodAffinityTerm'
      description: Pod anti affinity is a group of inter pod anti affinity scheduling
        rules.
    k8s.io.api.core.v1.PodDNSConfig:
      type: object
      properties:
        nameservers:
          type: array
          description: A list of DNS name server IP addresses. This will be appended
            to the base nameservers generated from DNSPolicy. Duplicated nameservers
            will be removed.
          items:
            type: string
            default: ""
        options:
          type: array
          description: A list of DNS resolver options. This will be merged with the
            base options generated from DNSPolicy. Duplicated entries will be removed.
            Resolution options given in Options will override those that appear in
            the base DNSPolicy.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.PodDNSConfigOption'
        searches:
          type: array
          description: A list of DNS search domains for host-name lookup. This will
            be appended to the base search paths generated from DNSPolicy. Duplicated
            search paths will be removed.
          items:
            type: string
            default: ""
      description: PodDNSConfig defines the DNS parameters of a pod in addition to
        those generated from DNSPolicy.
    k8s.io.api.core.v1.PodDNSConfigOption:
      type: object
      properties:
        name:
          type: string
          description: Required.
        value:
          type: string
      description: PodDNSConfigOption defines DNS resolver options of a pod.
    k8s.io.api.core.v1.PreferredSchedulingTerm:
      required:
      - preference
      - weight
      type: object
      properties:
        preference:
          $ref: '#/components/schemas/k8s.io.api.core.v1.NodeSelectorTerm'
        weight:
          type: integer
          description: "Weight associated with matching the corresponding nodeSelectorTerm,\
            \ in the range 1-100."
          format: int32
          default: 0
      description: An empty preferred scheduling term matches all objects with implicit
        weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no
        objects (i.e. is also a no-op).
    k8s.io.api.core.v1.ResourceClaim:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name must match the name of one entry in pod.spec.resourceClaims
            of the Pod where this field is used. It makes that resource available
            inside a container.
          default: ""
      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
    k8s.io.api.core.v1.ResourceFieldSelector:
      required:
      - resource
      type: object
      properties:
        containerName:
          type: string
          description: "Container name: required for volumes, optional for env vars"
        divisor:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        resource:
          type: string
          description: "Required: resource to select"
          default: ""
      description: "ResourceFieldSelector represents container resources (cpu, memory)\
        \ and their output format"
      x-kubernetes-map-type: atomic
    k8s.io.api.core.v1.ResourceRequirements:
      type: object
      properties:
        claims:
          type: array
          description: |-
            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

            This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

            This field is immutable. It can only be set for containers.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.ResourceClaim'
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - name
        limits:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
          description: "Limits describes the maximum amount of compute resources allowed.\
            \ More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        requests:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
          description: "Requests describes the minimum amount of compute resources\
            \ required. If Requests is omitted for a container, it defaults to Limits\
            \ if that is explicitly specified, otherwise to an implementation-defined\
            \ value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
      description: ResourceRequirements describes the compute resource requirements.
    k8s.io.api.core.v1.TCPSocketAction:
      type: object
      properties:
        host:
          type: string
          description: "Optional: Host name to connect to, defaults to the pod IP."
      description: TCPSocketAction describes an action based on opening a socket
    k8s.io.api.core.v1.Toleration:
      type: object
      properties:
        effect:
          type: string
          description: |-
            Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

            Possible enum values:
             - `"NoExecute"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.
             - `"NoSchedule"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.
             - `"PreferNoSchedule"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
          enum:
          - NoExecute
          - NoSchedule
          - PreferNoSchedule
        key:
          type: string
          description: "Key is the taint key that the toleration applies to. Empty\
            \ means match all taint keys. If the key is empty, operator must be Exists;\
            \ this combination means to match all values and all keys."
        operator:
          type: string
          description: |-
            Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.

            Possible enum values:
             - `"Equal"`
             - `"Exists"`
          enum:
          - Equal
          - Exists
        tolerationSeconds:
          type: integer
          description: "TolerationSeconds represents the period of time the toleration\
            \ (which must be of effect NoExecute, otherwise this field is ignored)\
            \ tolerates the taint. By default, it is not set, which means tolerate\
            \ the taint forever (do not evict). Zero and negative values will be treated\
            \ as 0 (evict immediately) by the system."
          format: int64
        value:
          type: string
          description: "Value is the taint value the toleration matches to. If the\
            \ operator is Exists, the value should be empty, otherwise just a regular\
            \ string."
      description: "The pod this Toleration is attached to tolerates any taint that\
        \ matches the triple <key,value,effect> using the matching operator <operator>."
    k8s.io.api.core.v1.TopologySpreadConstraint:
      required:
      - maxSkew
      - topologyKey
      - whenUnsatisfiable
      type: object
      properties:
        labelSelector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        matchLabelKeys:
          type: array
          description: "MatchLabelKeys is a set of pod label keys to select the pods\
            \ over which spreading will be calculated. The keys are used to lookup\
            \ values from the incoming pod labels, those key-value labels are ANDed\
            \ with labelSelector to select the group of existing pods over which spreading\
            \ will be calculated for the incoming pod. Keys that don't exist in the\
            \ incoming pod labels will be ignored. A null or empty list means only\
            \ match against labelSelector."
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        maxSkew:
          type: integer
          description: "MaxSkew describes the degree to which pods may be unevenly\
            \ distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum\
            \ permitted difference between the number of matching pods in the target\
            \ topology and the global minimum. The global minimum is the minimum number\
            \ of matching pods in an eligible domain or zero if the number of eligible\
            \ domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew\
            \ is set to 1, and pods with the same labelSelector spread as 2/2/1: In\
            \ this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P\
            \  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled\
            \ to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make\
            \ the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew\
            \ is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`,\
            \ it is used to give higher precedence to topologies that satisfy it.\
            \ It's a required field. Default value is 1 and 0 is not allowed."
          format: int32
          default: 0
        minDomains:
          type: integer
          description: |-
            MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

            For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.

            This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
          format: int32
        nodeAffinityPolicy:
          type: string
          description: |-
            NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

            If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.

            Possible enum values:
             - `"Honor"` means use this scheduling directive when calculating pod topology spread skew.
             - `"Ignore"` means ignore this scheduling directive when calculating pod topology spread skew.
          enum:
          - Honor
          - Ignore
        nodeTaintsPolicy:
          type: string
          description: |-
            NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.

            If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.

            Possible enum values:
             - `"Honor"` means use this scheduling directive when calculating pod topology spread skew.
             - `"Ignore"` means ignore this scheduling directive when calculating pod topology spread skew.
          enum:
          - Honor
          - Ignore
        topologyKey:
          type: string
          description: "TopologyKey is the key of node labels. Nodes that have a label\
            \ with this key and identical values are considered to be in the same\
            \ topology. We consider each <key, value> as a \"bucket\", and try to\
            \ put balanced number of pods into each bucket. We define a domain as\
            \ a particular instance of a topology. Also, we define an eligible domain\
            \ as a domain whose nodes meet the requirements of nodeAffinityPolicy\
            \ and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\"\
            , each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\"\
            , each zone is a domain of that topology. It's a required field."
          default: ""
        whenUnsatisfiable:
          type: string
          description: |-
            WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
              but giving higher precedence to topologies that would help reduce the
              skew.
            A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.

            Possible enum values:
             - `"DoNotSchedule"` instructs the scheduler not to schedule the pod when constraints are not satisfied.
             - `"ScheduleAnyway"` instructs the scheduler to schedule the pod even if constraints are not satisfied.
          default: ""
          enum:
          - DoNotSchedule
          - ScheduleAnyway
      description: TopologySpreadConstraint specifies how to spread matching pods
        among the given topology.
    k8s.io.api.core.v1.TypedLocalObjectReference:
      required:
      - kind
      - name
      type: object
      properties:
        apiGroup:
          type: string
          description: "APIGroup is the group for the resource being referenced. If\
            \ APIGroup is not specified, the specified Kind must be in the core API\
            \ group. For any other third-party types, APIGroup is required."
        kind:
          type: string
          description: Kind is the type of resource being referenced
          default: ""
        name:
          type: string
          description: Name is the name of resource being referenced
          default: ""
      description: TypedLocalObjectReference contains enough information to let you
        locate the typed referenced object inside the same namespace.
      x-kubernetes-map-type: atomic
    k8s.io.api.core.v1.TypedObjectReference:
      required:
      - kind
      - name
      type: object
      properties:
        apiGroup:
          type: string
          description: "APIGroup is the group for the resource being referenced. If\
            \ APIGroup is not specified, the specified Kind must be in the core API\
            \ group. For any other third-party types, APIGroup is required."
        kind:
          type: string
          description: Kind is the type of resource being referenced
          default: ""
        name:
          type: string
          description: Name is the name of resource being referenced
          default: ""
        namespace:
          type: string
          description: "Namespace is the namespace of resource being referenced Note\
            \ that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant\
            \ object is required in the referent namespace to allow that namespace's\
            \ owner to accept the reference. See the ReferenceGrant documentation\
            \ for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource\
            \ feature gate to be enabled."
    k8s.io.api.core.v1.WeightedPodAffinityTerm:
      required:
      - podAffinityTerm
      - weight
      type: object
      properties:
        podAffinityTerm:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PodAffinityTerm'
        weight:
          type: integer
          description: "weight associated with matching the corresponding podAffinityTerm,\
            \ in the range 1-100."
          format: int32
          default: 0
      description: The weights of all of the matched WeightedPodAffinityTerm fields
        are added per-node to find the most preferred node(s)
    k8s.io.apimachinery.pkg.api.resource.Quantity:
      type: string
      description: "Quantity is a fixed-point representation of a number. It provides\
        \ convenient marshaling/unmarshaling in JSON and YAML, in addition to String()\
        \ and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>\
        \        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty,\
        \ from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ...\
        \ | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::=\
        \ <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::=\
        \ \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix> \
        \         ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>    \
        \    ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units;\
        \ See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>     \
        \  ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000\
        \ = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\"\
        \ <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three\
        \ exponent forms is used, no quantity may represent a number greater than\
        \ 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers\
        \ larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded\
        \ up to 1m.) This may be extended in the future if we require larger or smaller\
        \ quantities.\n\nWhen a Quantity is parsed from a string, it will remember\
        \ the type of suffix it had, and will use the same type again when it is serialized.\n\
        \nBefore serializing, Quantity will be put in \"canonical form\". This means\
        \ that Exponent/suffix will be adjusted up or down (with a corresponding increase\
        \ or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional\
        \ digits will be emitted - The exponent (or suffix) is as large as possible.\n\
        \nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n\
        - 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\
        \n\nNote that the quantity will NEVER be internally represented by a floating\
        \ point number. That is the whole point of this exercise.\n\nNon-canonical\
        \ values will still parse as long as they are well formed, but will be re-emitted\
        \ in their canonical form. (So always use canonical form, or don't diff.)\n\
        \nThis format is intended to make it difficult to use these numbers without\
        \ writing some sort of special handling code in the hopes that that will cause\
        \ implementors to also use a fixed point implementation."
    k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup:
      required:
      - name
      - versions
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        name:
          type: string
          description: name is the name of the group.
          default: ""
        preferredVersion:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
        serverAddressByClientCIDRs:
          type: array
          description: "a map of client CIDR to server address that is serving this\
            \ group. This is to help clients reach servers in the most network-efficient\
            \ way possible. Clients can use the appropriate server address as per\
            \ the CIDR that they match. In case of multiple matches, clients should\
            \ use the longest matching CIDR. The server returns only those CIDRs that\
            \ it thinks that the client can match. For example: the master will return\
            \ an internal IP CIDR only, if the client reaches the server using an\
            \ internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header\
            \ or request.RemoteAddr (in that order) to get the client IP."
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
        versions:
          type: array
          description: versions are the versions supported in this group.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
      description: "APIGroup contains the name, the supported versions, and the preferred\
        \ version of a group."
    k8s.io.apimachinery.pkg.apis.meta.v1.APIGroupList:
      required:
      - groups
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        groups:
          type: array
          description: groups is a list of APIGroup.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.APIGroup'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      description: "APIGroupList is a list of APIGroup, to allow clients to discover\
        \ the API at /apis."
    k8s.io.apimachinery.pkg.apis.meta.v1.APIResource:
      required:
      - kind
      - name
      - namespaced
      - singularName
      - verbs
      type: object
      properties:
        categories:
          type: array
          description: categories is a list of the grouped resources this resource
            belongs to (e.g. 'all')
          items:
            type: string
            default: ""
        group:
          type: string
          description: "group is the preferred group of the resource.  Empty implies\
            \ the group of the containing resource list. For subresources, this may\
            \ have a different value, for example: Scale\"."
        kind:
          type: string
          description: kind is the kind for the resource (e.g. 'Foo' is the kind for
            a resource 'foo')
          default: ""
        name:
          type: string
          description: name is the plural name of the resource.
          default: ""
        namespaced:
          type: boolean
          description: namespaced indicates if a resource is namespaced or not.
          default: false
        shortNames:
          type: array
          description: shortNames is a list of suggested short names of the resource.
          items:
            type: string
            default: ""
        singularName:
          type: string
          description: singularName is the singular name of the resource.  This allows
            clients to handle plural and singular opaquely. The singularName is more
            correct for reporting status on a single item and both singular and plural
            are allowed from the kubectl CLI interface.
          default: ""
        storageVersionHash:
          type: string
          description: "The hash value of the storage version, the version this resource\
            \ is converted to when written to the data store. Value must be treated\
            \ as opaque by clients. Only equality comparison on the value is valid.\
            \ This is an alpha feature and may change or be removed in the future.\
            \ The field is populated by the apiserver only if the StorageVersionHash\
            \ feature gate is enabled. This field will remain optional even if it\
            \ graduates."
        verbs:
          type: array
          description: "verbs is a list of supported kube verbs (this includes get,\
            \ list, watch, create, update, patch, delete, deletecollection, and proxy)"
          items:
            type: string
            default: ""
        version:
          type: string
          description: "version is the preferred version of the resource.  Empty implies\
            \ the version of the containing resource list For subresources, this may\
            \ have a different value, for example: v1 (while inside a v1beta1 version\
            \ of the core resource's group)\"."
      description: APIResource specifies the name of a resource and whether it is
        namespaced.
    k8s.io.apimachinery.pkg.apis.meta.v1.APIResourceList:
      required:
      - groupVersion
      - resources
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        groupVersion:
          type: string
          description: groupVersion is the group and version this APIResourceList
            is for.
          default: ""
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        resources:
          type: array
          description: resources contains the name of the resources and if they are
            namespaced.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.APIResource'
      description: "APIResourceList is a list of APIResource, it is used to expose\
        \ the name of the resources supported in a specific group and version, and\
        \ if the resource is namespaced."
    k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
        gracePeriodSeconds:
          type: integer
          description: "The duration in seconds before the object should be deleted.\
            \ Value must be non-negative integer. The value zero indicates delete\
            \ immediately. If this value is nil, the default grace period for the\
            \ specified type will be used. Defaults to a per object value if not specified.\
            \ zero means delete immediately."
          format: int64
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        orphanDependents:
          type: boolean
          description: "Deprecated: please use the PropagationPolicy, this field will\
            \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
            \ the \"orphan\" finalizer will be added to/removed from the object's\
            \ finalizers list. Either this field or PropagationPolicy may be set,\
            \ but not both."
        preconditions:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions'
        propagationPolicy:
          type: string
          description: "Whether and how garbage collection will be performed. Either\
            \ this field or OrphanDependents may be set, but not both. The default\
            \ policy is decided by the existing finalizer set in the metadata.finalizers\
            \ and the resource-specific default policy. Acceptable values are: 'Orphan'\
            \ - orphan the dependents; 'Background' - allow the garbage collector\
            \ to delete the dependents in the background; 'Foreground' - a cascading\
            \ policy that deletes all dependents in the foreground."
      description: DeleteOptions may be provided when deleting an API object.
    k8s.io.apimachinery.pkg.apis.meta.v1.Duration:
      type: string
      description: "Duration is a wrapper around time.Duration which supports correct\
        \ marshaling to YAML and JSON. In particular, it marshals into strings, which\
        \ can be used as map keys in json."
    k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1:
      type: object
      description: |-
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

        The exact format is defined in sigs.k8s.io/structured-merge-diff
    k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery:
      required:
      - groupVersion
      - version
      type: object
      properties:
        groupVersion:
          type: string
          description: groupVersion specifies the API group and version in the form
            "group/version"
          default: ""
        version:
          type: string
          description: version specifies the version in the form of "version". This
            is to save the clients the trouble of splitting the GroupVersion.
          default: ""
      description: GroupVersion contains the "group/version" and "version" string
        of a version. It is made a struct to keep extensibility.
    k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: matchExpressions is a list of label selector requirements.
            The requirements are ANDed.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
        matchLabels:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "matchLabels is a map of {key,value} pairs. A single {key,value}\
            \ in the matchLabels map is equivalent to an element of matchExpressions,\
            \ whose key field is \"key\", the operator is \"In\", and the values array\
            \ contains only \"value\". The requirements are ANDed."
      description: A label selector is a label query over a set of resources. The
        result of matchLabels and matchExpressions are ANDed. An empty label selector
        matches all objects. A null label selector matches no objects.
      x-kubernetes-map-type: atomic
    k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: key is the label key that the selector applies to.
          default: ""
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: key
        operator:
          type: string
          description: "operator represents a key's relationship to a set of values.\
            \ Valid operators are In, NotIn, Exists and DoesNotExist."
          default: ""
        values:
          type: array
          description: "values is an array of string values. If the operator is In\
            \ or NotIn, the values array must be non-empty. If the operator is Exists\
            \ or DoesNotExist, the values array must be empty. This array is replaced\
            \ during a strategic merge patch."
          items:
            type: string
            default: ""
      description: "A label selector requirement is a selector that contains values,\
        \ a key, and an operator that relates the key and values."
    k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta:
      type: object
      properties:
        continue:
          type: string
          description: "continue may be set if the user set a limit on the number\
            \ of items returned, and indicates that the server has more data available.\
            \ The value is opaque and may be used to issue another request to the\
            \ endpoint that served this list to retrieve the next set of available\
            \ objects. Continuing a consistent list may not be possible if the server\
            \ configuration has changed or more than a few minutes have passed. The\
            \ resourceVersion field returned when using this continue value will be\
            \ identical to the value in the first response, unless you have received\
            \ this token from an error message."
        remainingItemCount:
          type: integer
          description: "remainingItemCount is the number of subsequent items in the\
            \ list which are not included in this list response. If the list request\
            \ contained label or field selectors, then the number of remaining items\
            \ is unknown and the field will be left unset and omitted during serialization.\
            \ If the list is complete (either because it is not chunking or because\
            \ this is the last chunk), then there are no more remaining items and\
            \ this field will be left unset and omitted during serialization. Servers\
            \ older than v1.15 do not set this field. The intended use of the remainingItemCount\
            \ is *estimating* the size of a collection. Clients should not rely on\
            \ the remainingItemCount to be set or to be exact."
          format: int64
        resourceVersion:
          type: string
          description: "String that identifies the server's internal version of this\
            \ object that can be used by clients to determine when objects have changed.\
            \ Value must be treated as opaque by clients and passed unmodified back\
            \ to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        selfLink:
          type: string
          description: "Deprecated: selfLink is a legacy read-only field that is no\
            \ longer populated by the system."
      description: "ListMeta describes metadata that synthetic resources must have,\
        \ including lists and various status objects. A resource may have only one\
        \ of {ObjectMeta, ListMeta}."
    k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      type: object
      properties:
        apiVersion:
          type: string
          description: APIVersion defines the version of this resource that this field
            set applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field set
            because it cannot be automatically converted.
        fieldsType:
          type: string
          description: "FieldsType is the discriminator for the different fields format\
            \ and version. There is currently only one possible value: \"FieldsV1\""
        fieldsV1:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1'
        manager:
          type: string
          description: Manager is an identifier of the workflow managing these fields.
        operation:
          type: string
          description: Operation is the type of operation which lead to this ManagedFieldsEntry
            being created. The only valid values for this field are 'Apply' and 'Update'.
        subresource:
          type: string
          description: "Subresource is the name of the subresource used to update\
            \ that object, or empty string if the object was updated through the main\
            \ resource. The value of this field is used to distinguish between managers,\
            \ even if they share the same name. For example, a status update will\
            \ be distinct from a regular update using the same manager name. Note\
            \ that the APIVersion field is not related to the Subresource field and\
            \ it always corresponds to the version of the main resource."
        time:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
      description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group\
        \ version of the resource that the fieldset applies to."
    k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "Annotations is an unstructured key value map stored with a\
            \ resource that may be set by external tools to store and retrieve arbitrary\
            \ metadata. They are not queryable and should be preserved when modifying\
            \ objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        deletionGracePeriodSeconds:
          type: integer
          description: Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when deletionTimestamp
            is also set. May only be shortened. Read-only.
          format: int64
        deletionTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        finalizers:
          type: array
          description: "Must be empty before the object is deleted from the registry.\
            \ Each entry is an identifier for the responsible component that will\
            \ remove the entry from the list. If the deletionTimestamp of the object\
            \ is non-nil, entries in this list can only be removed. Finalizers may\
            \ be processed and removed in any order.  Order is NOT enforced because\
            \ it introduces significant risk of stuck finalizers. finalizers is a\
            \ shared field, any actor with permission can reorder it. If the finalizer\
            \ list is processed in order, then this can lead to a situation in which\
            \ the component responsible for the first finalizer in the list is waiting\
            \ for a signal (field value, external system, or other) produced by a\
            \ component responsible for a finalizer later in the list, resulting in\
            \ a deadlock. Without enforced ordering finalizers are free to order amongst\
            \ themselves and are not vulnerable to ordering changes in the list."
          items:
            type: string
            default: ""
          x-kubernetes-patch-strategy: merge
        generateName:
          type: string
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will return a 409.

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        generation:
          type: integer
          description: A sequence number representing a specific generation of the
            desired state. Populated by the system. Read-only.
          format: int64
        labels:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "Map of string keys and values that can be used to organize\
            \ and categorize (scope and select) objects. May match selectors of replication\
            \ controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        managedFields:
          type: array
          description: "ManagedFields maps workflow-id and version to the set of fields\
            \ that are managed by that workflow. This is mostly for internal housekeeping,\
            \ and users typically shouldn't need to set or understand this field.\
            \ A workflow can be the user's name, a controller's name, or the name\
            \ of a specific apply path like \"ci-cd\". The set of fields is always\
            \ in the version that the workflow used when modifying the object."
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        name:
          type: string
          description: "Name must be unique within a namespace. Is required when creating\
            \ resources, although some resources may allow a client to request the\
            \ generation of an appropriate name automatically. Name is primarily intended\
            \ for creation idempotence and configuration definition. Cannot be updated.\
            \ More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        namespace:
          type: string
          description: |-
            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        ownerReferences:
          type: array
          description: "List of objects depended by this object. If ALL objects in\
            \ the list have been deleted, this object will be garbage collected. If\
            \ this object is managed by a controller, then an entry in this list will\
            \ point to this controller, with the controller field set to true. There\
            \ cannot be more than one managing controller."
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: uid
        resourceVersion:
          type: string
          description: |-
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        selfLink:
          type: string
          description: "Deprecated: selfLink is a legacy read-only field that is no\
            \ longer populated by the system."
        uid:
          type: string
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
      description: "ObjectMeta is metadata that all persisted resources must have,\
        \ which includes all objects users must create."
    k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference:
      required:
      - apiVersion
      - kind
      - name
      - uid
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
          default: ""
        blockOwnerDeletion:
          type: boolean
          description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer,\
            \ then the owner cannot be deleted from the key-value store until this\
            \ reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\
            \ for how the garbage collector interacts with this field and enforces\
            \ the foreground deletion. Defaults to false. To set this field, a user\
            \ needs \"delete\" permission of the owner, otherwise 422 (Unprocessable\
            \ Entity) will be returned."
        controller:
          type: boolean
          description: "If true, this reference points to the managing controller."
        kind:
          type: string
          description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          default: ""
        name:
          type: string
          description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
          default: ""
        uid:
          type: string
          description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
          default: ""
      description: "OwnerReference contains enough information to let you identify\
        \ an owning object. An owning object must be in the same namespace as the\
        \ dependent, or be cluster-scoped, so there is no namespace field."
      x-kubernetes-map-type: atomic
    k8s.io.apimachinery.pkg.apis.meta.v1.Patch:
      type: object
      description: Patch is provided to give a concrete name and type to the Kubernetes
        PATCH request body.
    k8s.io.apimachinery.pkg.apis.meta.v1.Preconditions:
      type: object
      properties:
        resourceVersion:
          type: string
          description: Specifies the target ResourceVersion
        uid:
          type: string
          description: Specifies the target UID.
      description: "Preconditions must be fulfilled before an operation (update, delete,\
        \ etc.) is carried out."
    k8s.io.apimachinery.pkg.apis.meta.v1.RootPaths:
      required:
      - paths
      type: object
      properties:
        paths:
          type: array
          description: paths are the paths available at root.
          items:
            type: string
            default: ""
      description: "RootPaths lists the paths available at root. For example: \"/healthz\"\
        , \"/apis\"."
    k8s.io.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR:
      required:
      - clientCIDR
      - serverAddress
      type: object
      properties:
        clientCIDR:
          type: string
          description: The CIDR with which clients can match their IP to figure out
            the server address that they should use.
          default: ""
        serverAddress:
          type: string
          description: "Address of this server, suitable for a client that matches\
            \ the above CIDR. This can be a hostname, hostname:port, IP or IP:port."
          default: ""
      description: "ServerAddressByClientCIDR helps the client to determine the server\
        \ address that they should use, depending on the clientCIDR that they match."
    k8s.io.apimachinery.pkg.apis.meta.v1.Status:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        code:
          type: integer
          description: "Suggested HTTP return code for this status, 0 if not set."
          format: int32
        details:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        message:
          type: string
          description: A human-readable description of the status of this operation.
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
        reason:
          type: string
          description: A machine-readable description of why this operation is in
            the "Failure" status. If this value is empty there is no information available.
            A Reason clarifies an HTTP status code but does not override it.
        status:
          type: string
          description: "Status of the operation. One of: \"Success\" or \"Failure\"\
            . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
      description: Status is a return value for calls that don't return other objects.
    k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause:
      type: object
      properties:
        field:
          type: string
          description: |-
            The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
        message:
          type: string
          description: A human-readable description of the cause of the error.  This
            field may be presented as-is to a reader.
        reason:
          type: string
          description: A machine-readable description of the cause of the error. If
            this value is empty there is no information available.
      description: "StatusCause provides more information about an api.Status failure,\
        \ including cases when multiple errors are encountered."
    k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails:
      type: object
      properties:
        causes:
          type: array
          description: The Causes array includes more details associated with the
            StatusReason failure. Not all StatusReasons may provide detailed causes.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause'
        group:
          type: string
          description: The group attribute of the resource associated with the status
            StatusReason.
        kind:
          type: string
          description: "The kind attribute of the resource associated with the status\
            \ StatusReason. On some operations may differ from the requested resource\
            \ Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        name:
          type: string
          description: The name attribute of the resource associated with the status
            StatusReason (when there is a single name which can be described).
        retryAfterSeconds:
          type: integer
          description: "If specified, the time in seconds before the operation should\
            \ be retried. Some errors may indicate the client must take an alternate\
            \ action - for those errors this field may indicate how long to wait before\
            \ taking the alternate action."
          format: int32
        uid:
          type: string
          description: "UID of the resource. (when there is a single resource which\
            \ can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
      description: "StatusDetails is a set of additional properties that MAY be set\
        \ by the server to provide additional information about a response. The Reason\
        \ field of a Status object defines what attributes will be set. Clients must\
        \ ignore fields that do not match the defined type of each attribute, and\
        \ should assume that any attribute may be empty, invalid, or under defined."
    k8s.io.apimachinery.pkg.apis.meta.v1.Time:
      type: string
      description: Time is a wrapper around time.Time which supports correct marshaling
        to YAML and JSON.  Wrappers are provided for many of the factory methods that
        the time package offers.
      format: date-time
    k8s.io.apimachinery.pkg.apis.meta.v1.WatchEvent:
      required:
      - object
      - type
      type: object
      properties:
        object:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.runtime.RawExtension'
        type:
          type: string
          default: ""
      description: Event represents a single event to a watched resource.
    k8s.io.apimachinery.pkg.runtime.RawExtension:
      type: object
      description: "RawExtension is used to hold extensions in external versions.\n\
        \nTo use this, make a field which has RawExtension as its type in your external,\
        \ versioned struct, and Object in your internal struct. You also need to register\
        \ your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject\
        \ struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object\
        \ `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string\
        \ `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct\
        \ {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension\
        \ `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string\
        \ `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something\
        \ like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"\
        v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\"\
        :\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml\
        \ to unmarshal the serialized data into your external MyAPIObject. That causes\
        \ the raw JSON to be stored, but not unpacked. The next step is to copy (using\
        \ pkg/conversion) into the internal struct. The runtime package's DefaultScheme\
        \ has conversion functions installed which will unpack the JSON stored in\
        \ RawExtension, turning it into the correct object type, and storing it in\
        \ the Object. (TODO: In the case where the object is of an unknown type, a\
        \ runtime.Unknown object will be created and stored.)"
    k8s.io.apimachinery.pkg.util.intstr.IntOrString:
      type: string
      description: "IntOrString is a type that can hold an int32 or a string.  When\
        \ used in JSON or YAML marshalling and unmarshalling, it produces or consumes\
        \ the inner type.  This allows you to have, for example, a JSON field that\
        \ can accept a name or number."
      format: int-or-string
    v1.ACPI:
      type: object
      properties:
        slicNameRef:
          type: string
          description: "SlicNameRef should match the volume name of a secret object.\
            \ The data in the secret should be a binary blob that follows the ACPI\
            \ SLIC standard, see: https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)"
    v1.AccessCredential:
      type: object
      properties:
        sshPublicKey:
          $ref: '#/components/schemas/v1.SSHPublicKeyAccessCredential'
        userPassword:
          $ref: '#/components/schemas/v1.UserPasswordAccessCredential'
      description: AccessCredential represents a credential source that can be used
        to authorize remote access to the vm guest Only one of its members may be
        specified.
    v1.AccessCredentialSecretSource:
      required:
      - secretName
      type: object
      properties:
        secretName:
          type: string
          description: SecretName represents the name of the secret in the VMI's namespace
          default: ""
    v1.AddVolumeOptions:
      required:
      - disk
      - name
      - volumeSource
      type: object
      properties:
        disk:
          $ref: '#/components/schemas/v1.Disk'
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        name:
          type: string
          description: Name represents the name that will be used to map the disk
            to the corresponding volume. This overrides any name set inside the Disk
            struct itself.
          default: ""
        volumeSource:
          $ref: '#/components/schemas/v1.HotplugVolumeSource'
      description: AddVolumeOptions is provided when dynamically hot plugging a volume
        and disk
    v1.ArchConfiguration:
      type: object
      properties:
        amd64:
          $ref: '#/components/schemas/v1.ArchSpecificConfiguration'
        arm64:
          $ref: '#/components/schemas/v1.ArchSpecificConfiguration'
        defaultArchitecture:
          type: string
        ppc64le:
          $ref: '#/components/schemas/v1.ArchSpecificConfiguration'
    v1.ArchSpecificConfiguration:
      type: object
      properties:
        emulatedMachines:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        machineType:
          type: string
        ovmfPath:
          type: string
    v1.BIOS:
      type: object
      properties:
        useSerial:
          type: boolean
          description: "If set, the BIOS output will be transmitted over serial"
      description: "If set (default), BIOS will be used."
    v1.BlockSize:
      type: object
      properties:
        custom:
          $ref: '#/components/schemas/v1.CustomBlockSize'
        matchVolume:
          $ref: '#/components/schemas/v1.FeatureState'
      description: BlockSize provides the option to change the block size presented
        to the VM for a disk. Only one of its members may be specified.
    v1.Bootloader:
      type: object
      properties:
        bios:
          $ref: '#/components/schemas/v1.BIOS'
        efi:
          $ref: '#/components/schemas/v1.EFI'
      description: Represents the firmware blob used to assist in the domain creation
        process. Used for setting the QEMU BIOS file path for the libvirt domain.
    v1.CDRomTarget:
      type: object
      properties:
        bus:
          type: string
          description: "Bus indicates the type of disk device to emulate. supported\
            \ values: virtio, sata, scsi."
        readonly:
          type: boolean
          description: ReadOnly. Defaults to true.
        tray:
          type: string
          description: Tray indicates if the tray of the device is open or closed.
            Allowed values are "open" and "closed". Defaults to closed.
    v1.CPU:
      type: object
      properties:
        cores:
          type: integer
          description: Cores specifies the number of cores inside the vmi. Must be
            a value greater or equal 1.
          format: int64
        dedicatedCpuPlacement:
          type: boolean
          description: DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance
            on a node with enough dedicated pCPUs and pin the vCPUs to it.
        features:
          type: array
          description: Features specifies the CPU features list inside the VMI.
          items:
            $ref: '#/components/schemas/v1.CPUFeature'
        isolateEmulatorThread:
          type: boolean
          description: IsolateEmulatorThread requests one more dedicated pCPU to be
            allocated for the VMI to place the emulator thread on it.
        maxSockets:
          type: integer
          description: MaxSockets specifies the maximum amount of sockets that can
            be hotplugged
          format: int64
        model:
          type: string
          description: Model specifies the CPU model inside the VMI. List of available
            models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It
            is possible to specify special cases like "host-passthrough" to get the
            same CPU as the node and "host-model" to get CPU closest to the node one.
            Defaults to host-model.
        numa:
          $ref: '#/components/schemas/v1.NUMA'
        realtime:
          $ref: '#/components/schemas/v1.Realtime'
        sockets:
          type: integer
          description: Sockets specifies the number of sockets inside the vmi. Must
            be a value greater or equal 1.
          format: int64
        threads:
          type: integer
          description: Threads specifies the number of threads inside the vmi. Must
            be a value greater or equal 1.
          format: int64
      description: CPU allows specifying the CPU topology.
    v1.CPUFeature:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the CPU feature
          default: ""
        policy:
          type: string
          description: "Policy is the CPU feature attribute which can have the following\
            \ attributes: force    - The virtual CPU will claim the feature is supported\
            \ regardless of it being supported by host CPU. require  - Guest creation\
            \ will fail unless the feature is supported by the host CPU or the hypervisor\
            \ is able to emulate it. optional - The feature will be supported by virtual\
            \ CPU if and only if it is supported by host CPU. disable  - The feature\
            \ will not be supported by virtual CPU. forbid   - Guest creation will\
            \ fail if the feature is supported by host CPU. Defaults to require"
      description: CPUFeature allows specifying a CPU feature.
    v1.CPUTopology:
      type: object
      properties:
        cores:
          type: integer
          description: Cores specifies the number of cores inside the vmi. Must be
            a value greater or equal 1.
          format: int64
        sockets:
          type: integer
          description: Sockets specifies the number of sockets inside the vmi. Must
            be a value greater or equal 1.
          format: int64
        threads:
          type: integer
          description: Threads specifies the number of threads inside the vmi. Must
            be a value greater or equal 1.
          format: int64
      description: "CPUTopology allows specifying the amount of cores, sockets and\
        \ threads."
    v1.CertConfig:
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
        renewBefore:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
      description: CertConfig contains the tunables for TLS certificates
    v1.Chassis:
      type: object
      properties:
        asset:
          type: string
        manufacturer:
          type: string
        serial:
          type: string
        sku:
          type: string
        version:
          type: string
      description: Chassis specifies the chassis info passed to the domain.
    v1.ClientPassthroughDevices:
      type: object
      description: |-
        Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.

        The struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.
    v1.Clock:
      type: object
      properties:
        timer:
          $ref: '#/components/schemas/v1.Timer'
        timezone:
          type: string
          description: Timezone sets the guest clock to the specified timezone. Zone
            name follows the TZ environment variable format (e.g. 'America/New_York').
        utc:
          $ref: '#/components/schemas/v1.ClockOffsetUTC'
      description: Represents the clock and timers of a vmi.
    v1.ClockOffset:
      type: object
      properties:
        timezone:
          type: string
          description: Timezone sets the guest clock to the specified timezone. Zone
            name follows the TZ environment variable format (e.g. 'America/New_York').
        utc:
          $ref: '#/components/schemas/v1.ClockOffsetUTC'
      description: Exactly one of its members must be set.
    v1.ClockOffsetUTC:
      type: object
      properties:
        offsetSeconds:
          type: integer
          description: "OffsetSeconds specifies an offset in seconds, relative to\
            \ UTC. If set, guest changes to the clock will be kept during reboots\
            \ and not reset."
          format: int32
      description: UTC sets the guest clock to UTC on each boot.
    v1.CloudInitConfigDriveSource:
      type: object
      properties:
        networkData:
          type: string
          description: NetworkData contains config drive inline cloud-init networkdata.
        networkDataBase64:
          type: string
          description: NetworkDataBase64 contains config drive cloud-init networkdata
            as a base64 encoded string.
        networkDataSecretRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
        secretRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
        userData:
          type: string
          description: UserData contains config drive inline cloud-init userdata.
        userDataBase64:
          type: string
          description: UserDataBase64 contains config drive cloud-init userdata as
            a base64 encoded string.
      description: "Represents a cloud-init config drive user data source. More info:\
        \ https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html"
    v1.CloudInitNoCloudSource:
      type: object
      properties:
        networkData:
          type: string
          description: NetworkData contains NoCloud inline cloud-init networkdata.
        networkDataBase64:
          type: string
          description: NetworkDataBase64 contains NoCloud cloud-init networkdata as
            a base64 encoded string.
        networkDataSecretRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
        secretRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
        userData:
          type: string
          description: UserData contains NoCloud inline cloud-init userdata.
        userDataBase64:
          type: string
          description: UserDataBase64 contains NoCloud cloud-init userdata as a base64
            encoded string.
      description: "Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html"
    v1.ComponentConfig:
      type: object
      properties:
        nodePlacement:
          $ref: '#/components/schemas/v1.NodePlacement'
        replicas:
          type: integer
          description: "replicas indicates how many replicas should be created for\
            \ each KubeVirt infrastructure component (like virt-api or virt-controller).\
            \ Defaults to 2. WARNING: this is an advanced feature that prevents auto-scaling\
            \ for core kubevirt components. Please use with caution!"
          format: byte
    v1.ConfigDriveSSHPublicKeyAccessCredentialPropagation:
      type: object
    v1.ConfigMapVolumeSource:
      type: object
      properties:
        name:
          type: string
          description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        optional:
          type: boolean
          description: Specify whether the ConfigMap or it's keys must be defined
        volumeLabel:
          type: string
          description: "The volume label of the resulting disk inside the VMI. Different\
            \ bootstrapping mechanisms require different values. Typical values are\
            \ \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart)."
      description: "ConfigMapVolumeSource adapts a ConfigMap into a volume. More info:\
        \ https://kubernetes.io/docs/concepts/storage/volumes/#configmap"
    v1.ContainerDiskInfo:
      type: object
      properties:
        checksum:
          type: integer
          description: Checksum is the checksum of the rootdisk or kernel artifacts
            inside the containerdisk
          format: int64
      description: ContainerDiskInfo shows info about the containerdisk
    v1.ContainerDiskSource:
      required:
      - image
      type: object
      properties:
        image:
          type: string
          description: Image is the name of the image with the embedded disk.
          default: ""
        imagePullPolicy:
          type: string
          description: |-
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

            Possible enum values:
             - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
             - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
             - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
          enum:
          - Always
          - IfNotPresent
          - Never
        imagePullSecret:
          type: string
          description: ImagePullSecret is the name of the Docker registry secret required
            to pull the image. The secret must already exist.
        path:
          type: string
          description: Path defines the path to disk file in the container
      description: Represents a docker image with an embedded disk.
    v1.CustomBlockSize:
      required:
      - logical
      - physical
      type: object
      properties:
        logical:
          type: integer
          format: int32
          default: 0
        physical:
          type: integer
          format: int32
          default: 0
      description: CustomBlockSize represents the desired logical and physical block
        size for a VM disk.
    v1.CustomProfile:
      type: object
      properties:
        localhostProfile:
          type: string
        runtimeDefaultProfile:
          type: boolean
    v1.CustomizeComponents:
      type: object
      properties:
        flags:
          $ref: '#/components/schemas/v1.Flags'
        patches:
          type: array
          items:
            $ref: '#/components/schemas/v1.CustomizeComponentsPatch'
          x-kubernetes-list-type: atomic
    v1.CustomizeComponentsPatch:
      required:
      - patch
      - resourceName
      - resourceType
      - type
      type: object
      properties:
        patch:
          type: string
          default: ""
        resourceName:
          type: string
          default: ""
        resourceType:
          type: string
          default: ""
        type:
          type: string
          default: ""
    v1.DHCPOptions:
      type: object
      properties:
        bootFileName:
          type: string
          description: If specified will pass option 67 to interface's DHCP server
        ntpServers:
          type: array
          description: If specified will pass the configured NTP server to the VM
            via DHCP option 042.
          items:
            type: string
            default: ""
        privateOptions:
          type: array
          description: "If specified will pass extra DHCP options for private use,\
            \ range: 224-254"
          items:
            $ref: '#/components/schemas/v1.DHCPPrivateOptions'
        tftpServerName:
          type: string
          description: If specified will pass option 66 to interface's DHCP server
      description: Extra DHCP options to use in the interface.
    v1.DHCPPrivateOptions:
      required:
      - option
      - value
      type: object
      properties:
        option:
          type: integer
          description: Option is an Integer value from 224-254 Required.
          format: int32
          default: 0
        value:
          type: string
          description: Value is a String value for the Option provided Required.
          default: ""
      description: DHCPExtraOptions defines Extra DHCP options for a VM.
    v1.DataVolumeSource:
      required:
      - name
      type: object
      properties:
        hotpluggable:
          type: boolean
          description: Hotpluggable indicates whether the volume can be hotplugged
            and hotunplugged.
        name:
          type: string
          description: Name of both the DataVolume and the PVC in the same namespace.
            After PVC population the DataVolume is garbage collected by default.
          default: ""
    v1.DataVolumeTemplateDummyStatus:
      type: object
    v1.DataVolumeTemplateSpec:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1beta1.DataVolumeSpec'
        status:
          $ref: '#/components/schemas/v1.DataVolumeTemplateDummyStatus'
    v1.DeprecatedInterfaceMacvtap:
      type: object
      description: "DeprecatedInterfaceMacvtap is an alias to the deprecated InterfaceMacvtap\
        \ that connects to a given network by extending the Kubernetes node's L2 networks\
        \ via a macvtap interface. Deprecated: Removed in v1.3"
    v1.DeprecatedInterfaceSlirp:
      type: object
      description: "DeprecatedInterfaceSlirp is an alias to the deprecated InterfaceSlirp\
        \ that connects to a given network using QEMU user networking mode. Deprecated:\
        \ Removed in v1.3"
    v1.DeveloperConfiguration:
      type: object
      properties:
        cpuAllocationRatio:
          type: integer
          description: "For each requested virtual CPU, CPUAllocationRatio defines\
            \ how much physical CPU to request per VMI from the hosting node. The\
            \ value is in fraction of a CPU thread (or core on non-hyperthreaded nodes).\
            \ For example, a value of 1 means 1 physical CPU thread per VMI CPU thread.\
            \ A value of 100 would be 1% of a physical thread allocated for each requested\
            \ VMI thread. This option has no effect on VMIs that request dedicated\
            \ CPUs. More information at: https://kubevirt.io/user-guide/operations/node_overcommit/#node-cpu-allocation-ratio\
            \ Defaults to 10"
          format: int32
        diskVerification:
          $ref: '#/components/schemas/v1.DiskVerification'
        featureGates:
          type: array
          description: FeatureGates is the list of experimental features to enable.
            Defaults to none
          items:
            type: string
            default: ""
        logVerbosity:
          $ref: '#/components/schemas/v1.LogVerbosity'
        memoryOvercommit:
          type: integer
          description: "MemoryOvercommit is the percentage of memory we want to give\
            \ VMIs compared to the amount given to its parent pod (virt-launcher).\
            \ For example, a value of 102 means the VMI will \"see\" 2% more memory\
            \ than its parent pod. Values under 100 are effectively \"undercommits\"\
            . Overcommits can lead to memory exhaustion, which in turn can lead to\
            \ crashes. Use carefully. Defaults to 100"
          format: int32
        minimumClusterTSCFrequency:
          type: integer
          description: Allow overriding the automatically determined minimum TSC frequency
            of the cluster and fixate the minimum to this frequency.
          format: int64
        minimumReservePVCBytes:
          type: integer
          description: "MinimumReservePVCBytes is the amount of space, in bytes, to\
            \ leave unused on disks. Defaults to 131072 (128KiB)"
          format: int64
        nodeSelectors:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: NodeSelectors allows restricting VMI creation to nodes that
            match a set of labels. Defaults to none
        pvcTolerateLessSpaceUpToPercent:
          type: integer
          description: "LessPVCSpaceToleration determines how much smaller, in percentage,\
            \ disk PVCs are allowed to be compared to the requested size (to account\
            \ for various overheads). Defaults to 10"
          format: int32
        useEmulation:
          type: boolean
          description: UseEmulation can be set to true to allow fallback to software
            emulation in case hardware-assisted emulation is not available. Defaults
            to false
      description: DeveloperConfiguration holds developer options
    v1.Devices:
      type: object
      properties:
        autoattachGraphicsDevice:
          type: boolean
          description: Whether to attach the default graphics device or not. VNC will
            not be available if set to false. Defaults to true.
        autoattachInputDevice:
          type: boolean
          description: Whether to attach an Input Device. Defaults to false.
        autoattachMemBalloon:
          type: boolean
          description: Whether to attach the Memory balloon device with default period.
            Period can be adjusted in virt-config. Defaults to true.
        autoattachPodInterface:
          type: boolean
          description: Whether to attach a pod network interface. Defaults to true.
        autoattachSerialConsole:
          type: boolean
          description: Whether to attach the default virtio-serial console or not.
            Serial console access will not be available if set to false. Defaults
            to true.
        autoattachVSOCK:
          type: boolean
          description: Whether to attach the VSOCK CID to the VM or not. VSOCK access
            will be available if set to true. Defaults to false.
        blockMultiQueue:
          type: boolean
          description: Whether or not to enable virtio multi-queue for block devices.
            Defaults to false.
        clientPassthrough:
          $ref: '#/components/schemas/v1.ClientPassthroughDevices'
        disableHotplug:
          type: boolean
          description: DisableHotplug disabled the ability to hotplug disks.
        disks:
          type: array
          description: "Disks describes disks, cdroms and luns which are connected\
            \ to the vmi."
          items:
            $ref: '#/components/schemas/v1.Disk'
        downwardMetrics:
          $ref: '#/components/schemas/v1.DownwardMetrics'
        filesystems:
          type: array
          description: Filesystems describes filesystem which is connected to the
            vmi.
          items:
            $ref: '#/components/schemas/v1.Filesystem'
          x-kubernetes-list-type: atomic
        gpus:
          type: array
          description: Whether to attach a GPU device to the vmi.
          items:
            $ref: '#/components/schemas/v1.GPU'
          x-kubernetes-list-type: atomic
        hostDevices:
          type: array
          description: Whether to attach a host device to the vmi.
          items:
            $ref: '#/components/schemas/v1.HostDevice'
          x-kubernetes-list-type: atomic
        inputs:
          type: array
          description: Inputs describe input devices
          items:
            $ref: '#/components/schemas/v1.Input'
        interfaces:
          type: array
          description: Interfaces describe network interfaces which are added to the
            vmi.
          items:
            $ref: '#/components/schemas/v1.Interface'
        logSerialConsole:
          type: boolean
          description: Whether to log the auto-attached default serial console or
            not. Serial console logs will be collect to a file and then streamed from
            a named `guest-console-log`. Not relevant if autoattachSerialConsole is
            disabled. Defaults to cluster wide setting on VirtualMachineOptions.
        networkInterfaceMultiqueue:
          type: boolean
          description: "If specified, virtual network interfaces configured with a\
            \ virtio bus will also enable the vhost multiqueue feature for network\
            \ devices. The number of queues created depends on additional factors\
            \ of the VirtualMachineInstance, like the number of guest CPUs."
        rng:
          $ref: '#/components/schemas/v1.Rng'
        sound:
          $ref: '#/components/schemas/v1.SoundDevice'
        tpm:
          $ref: '#/components/schemas/v1.TPMDevice'
        useVirtioTransitional:
          type: boolean
          description: Fall back to legacy virtio 0.9 support if virtio bus is selected
            on devices. This is helpful for old machines like CentOS6 or RHEL6 which
            do not understand virtio_non_transitional (virtio 1.0).
        watchdog:
          $ref: '#/components/schemas/v1.Watchdog'
    v1.DisableFreePageReporting:
      type: object
    v1.DisableSerialConsoleLog:
      type: object
    v1.Disk:
      required:
      - name
      type: object
      properties:
        blockSize:
          $ref: '#/components/schemas/v1.BlockSize'
        bootOrder:
          type: integer
          description: "BootOrder is an integer value > 0, used to determine ordering\
            \ of boot devices. Lower values take precedence. Each disk or interface\
            \ that has a boot order must have a unique value. Disks without a boot\
            \ order are not tried if a disk with a boot order exists."
          format: int32
        cache:
          type: string
          description: "Cache specifies which kvm disk cache mode should be used.\
            \ Supported values are: CacheNone, CacheWriteThrough."
        cdrom:
          $ref: '#/components/schemas/v1.CDRomTarget'
        dedicatedIOThread:
          type: boolean
          description: dedicatedIOThread indicates this disk should have an exclusive
            IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
        disk:
          $ref: '#/components/schemas/v1.DiskTarget'
        errorPolicy:
          type: string
          description: "If specified, it can change the default error policy (stop)\
            \ for the disk"
        io:
          type: string
          description: "IO specifies which QEMU disk IO mode should be used. Supported\
            \ values are: native, default, threads."
        lun:
          $ref: '#/components/schemas/v1.LunTarget'
        name:
          type: string
          description: Name is the device name
          default: ""
        serial:
          type: string
          description: Serial provides the ability to specify a serial number for
            the disk device.
        shareable:
          type: boolean
          description: If specified the disk is made sharable and multiple write from
            different VMs are permitted
        tag:
          type: string
          description: "If specified, disk address and its tag will be provided to\
            \ the guest via config drive metadata"
    v1.DiskTarget:
      type: object
      properties:
        bus:
          type: string
          description: "Bus indicates the type of disk device to emulate. supported\
            \ values: virtio, sata, scsi, usb."
        pciAddress:
          type: string
          description: "If specified, the virtual disk will be placed on the guests\
            \ pci address with the specified PCI address. For example: 0000:81:01.10"
        readonly:
          type: boolean
          description: ReadOnly. Defaults to false.
    v1.DiskVerification:
      required:
      - memoryLimit
      type: object
      properties:
        memoryLimit:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
      description: DiskVerification holds container disks verification limits
    v1.DomainMemoryDumpInfo:
      type: object
      properties:
        claimName:
          type: string
          description: ClaimName is the name of the pvc the memory was dumped to
        endTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        startTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        targetFileName:
          type: string
          description: TargetFileName is the name of the memory dump output
      description: DomainMemoryDumpInfo represents the memory dump information
    v1.DomainSpec:
      required:
      - devices
      type: object
      properties:
        chassis:
          $ref: '#/components/schemas/v1.Chassis'
        clock:
          $ref: '#/components/schemas/v1.Clock'
        cpu:
          $ref: '#/components/schemas/v1.CPU'
        devices:
          $ref: '#/components/schemas/v1.Devices'
        features:
          $ref: '#/components/schemas/v1.Features'
        firmware:
          $ref: '#/components/schemas/v1.Firmware'
        ioThreadsPolicy:
          type: string
          description: "Controls whether or not disks will share IOThreads. Omitting\
            \ IOThreadsPolicy disables use of IOThreads. One of: shared, auto"
        launchSecurity:
          $ref: '#/components/schemas/v1.LaunchSecurity'
        machine:
          $ref: '#/components/schemas/v1.Machine'
        memory:
          $ref: '#/components/schemas/v1.Memory'
        resources:
          $ref: '#/components/schemas/v1.ResourceRequirements'
    v1.DownwardAPIVolumeSource:
      type: object
      properties:
        fields:
          type: array
          description: Fields is a list of downward API volume file
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.DownwardAPIVolumeFile'
        volumeLabel:
          type: string
          description: "The volume label of the resulting disk inside the VMI. Different\
            \ bootstrapping mechanisms require different values. Typical values are\
            \ \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart)."
      description: DownwardAPIVolumeSource represents a volume containing downward
        API info.
    v1.DownwardMetrics:
      type: object
    v1.DownwardMetricsVolumeSource:
      type: object
      description: DownwardMetricsVolumeSource adds a very small disk to VMIs which
        contains a limited view of host and guest metrics. The disk content is compatible
        with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
    v1.EFI:
      type: object
      properties:
        persistent:
          type: boolean
          description: "If set to true, Persistent will persist the EFI NVRAM across\
            \ reboots. Defaults to false"
        secureBoot:
          type: boolean
          description: "If set, SecureBoot will be enabled and the OVMF roms will\
            \ be swapped for SecureBoot-enabled ones. Requires SMM to be enabled.\
            \ Defaults to true"
      description: "If set, EFI will be used instead of BIOS."
    v1.EmptyDiskSource:
      required:
      - capacity
      type: object
      properties:
        capacity:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
      description: EmptyDisk represents a temporary disk which shares the vmis lifecycle.
    v1.EphemeralVolumeSource:
      type: object
      properties:
        persistentVolumeClaim:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource'
    v1.FeatureAPIC:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled determines if the feature should be enabled or disabled
            on the guest. Defaults to true.
        endOfInterrupt:
          type: boolean
          description: EndOfInterrupt enables the end of interrupt notification in
            the guest. Defaults to false.
    v1.FeatureHyperv:
      type: object
      properties:
        evmcs:
          $ref: '#/components/schemas/v1.FeatureState'
        frequencies:
          $ref: '#/components/schemas/v1.FeatureState'
        ipi:
          $ref: '#/components/schemas/v1.FeatureState'
        reenlightenment:
          $ref: '#/components/schemas/v1.FeatureState'
        relaxed:
          $ref: '#/components/schemas/v1.FeatureState'
        reset:
          $ref: '#/components/schemas/v1.FeatureState'
        runtime:
          $ref: '#/components/schemas/v1.FeatureState'
        spinlocks:
          $ref: '#/components/schemas/v1.FeatureSpinlocks'
        synic:
          $ref: '#/components/schemas/v1.FeatureState'
        synictimer:
          $ref: '#/components/schemas/v1.SyNICTimer'
        tlbflush:
          $ref: '#/components/schemas/v1.FeatureState'
        vapic:
          $ref: '#/components/schemas/v1.FeatureState'
        vendorid:
          $ref: '#/components/schemas/v1.FeatureVendorID'
        vpindex:
          $ref: '#/components/schemas/v1.FeatureState'
      description: Hyperv specific features.
    v1.FeatureKVM:
      type: object
      properties:
        hidden:
          type: boolean
          description: Hide the KVM hypervisor from standard MSR based discovery.
            Defaults to false
    v1.FeatureSpinlocks:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled determines if the feature should be enabled or disabled
            on the guest. Defaults to true.
        spinlocks:
          type: integer
          description: Retries indicates the number of retries. Must be a value greater
            or equal 4096. Defaults to 4096.
          format: int64
    v1.FeatureState:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled determines if the feature should be enabled or disabled
            on the guest. Defaults to true.
      description: Represents if a feature is enabled or disabled.
    v1.FeatureVendorID:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled determines if the feature should be enabled or disabled
            on the guest. Defaults to true.
        vendorid:
          type: string
          description: "VendorID sets the hypervisor vendor id, visible to the vmi.\
            \ String up to twelve characters."
    v1.Features:
      type: object
      properties:
        acpi:
          $ref: '#/components/schemas/v1.FeatureState'
        apic:
          $ref: '#/components/schemas/v1.FeatureAPIC'
        hyperv:
          $ref: '#/components/schemas/v1.FeatureHyperv'
        hypervPassthrough:
          $ref: '#/components/schemas/v1.HyperVPassthrough'
        kvm:
          $ref: '#/components/schemas/v1.FeatureKVM'
        pvspinlock:
          $ref: '#/components/schemas/v1.FeatureState'
        smm:
          $ref: '#/components/schemas/v1.FeatureState'
    v1.Filesystem:
      required:
      - name
      - virtiofs
      type: object
      properties:
        name:
          type: string
          description: Name is the device name
          default: ""
        virtiofs:
          $ref: '#/components/schemas/v1.FilesystemVirtiofs'
    v1.FilesystemVirtiofs:
      type: object
    v1.Firmware:
      type: object
      properties:
        acpi:
          $ref: '#/components/schemas/v1.ACPI'
        bootloader:
          $ref: '#/components/schemas/v1.Bootloader'
        kernelBoot:
          $ref: '#/components/schemas/v1.KernelBoot'
        serial:
          type: string
          description: The system-serial-number in SMBIOS
        uuid:
          type: string
          description: UUID reported by the vmi bios. Defaults to a random generated
            uid.
    v1.Flags:
      type: object
      properties:
        api:
          type: object
          additionalProperties:
            type: string
            default: ""
        controller:
          type: object
          additionalProperties:
            type: string
            default: ""
        handler:
          type: object
          additionalProperties:
            type: string
            default: ""
      description: Flags will create a patch that will replace all flags for the container's
        command field. The only flags that will be used are those define. There are
        no guarantees around forward/backward compatibility.  If set incorrectly this
        will cause the resource when rolled out to error until flags are updated.
    v1.FreezeUnfreezeTimeout:
      required:
      - unfreezeTimeout
      type: object
      properties:
        unfreezeTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
      description: FreezeUnfreezeTimeout represent the time unfreeze will be triggered
        if guest was not unfrozen by unfreeze command
    v1.GPU:
      required:
      - deviceName
      - name
      type: object
      properties:
        deviceName:
          type: string
          default: ""
        name:
          type: string
          description: Name of the GPU device as exposed by a device plugin
          default: ""
        tag:
          type: string
          description: "If specified, the virtual network interface address and its\
            \ tag will be provided to the guest via config drive"
        virtualGPUOptions:
          $ref: '#/components/schemas/v1.VGPUOptions'
    v1.GenerationStatus:
      required:
      - group
      - lastGeneration
      - name
      - resource
      type: object
      properties:
        group:
          type: string
          description: group is the group of the thing you're tracking
          default: ""
        hash:
          type: string
          description: hash is an optional field set for resources without generation
            that are content sensitive like secrets and configmaps
        lastGeneration:
          type: integer
          description: lastGeneration is the last generation of the workload controller
            involved
          format: int64
          default: 0
        name:
          type: string
          description: name is the name of the thing you're tracking
          default: ""
        namespace:
          type: string
          description: namespace is where the thing you're tracking is
        resource:
          type: string
          description: resource is the resource type of the thing you're tracking
          default: ""
      description: GenerationStatus keeps track of the generation for a given resource
        so that decisions about forced updates can be made.
    v1.GuestAgentCommandInfo:
      required:
      - name
      type: object
      properties:
        enabled:
          type: boolean
        name:
          type: string
          default: ""
      description: List of commands that QEMU guest agent supports
    v1.GuestAgentPing:
      type: object
      description: GuestAgentPing configures the guest-agent based ping probe
    v1.HPETTimer:
      type: object
      properties:
        present:
          type: boolean
          description: Enabled set to false makes sure that the machine type or a
            preset can't add the timer. Defaults to true.
        tickPolicy:
          type: string
          description: "TickPolicy determines what happens when QEMU misses a deadline\
            \ for injecting a tick to the guest. One of \"delay\", \"catchup\", \"\
            merge\", \"discard\"."
    v1.HostDevice:
      required:
      - deviceName
      - name
      type: object
      properties:
        deviceName:
          type: string
          description: DeviceName is the resource name of the host device exposed
            by a device plugin
          default: ""
        name:
          type: string
          default: ""
        tag:
          type: string
          description: "If specified, the virtual network interface address and its\
            \ tag will be provided to the guest via config drive"
    v1.HostDisk:
      required:
      - path
      - type
      type: object
      properties:
        capacity:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        path:
          type: string
          description: The path to HostDisk image located on the cluster
          default: ""
        shared:
          type: boolean
          description: Shared indicate whether the path is shared between nodes
        type:
          type: string
          description: Contains information if disk.img exists or should be created
            allowed options are 'Disk' and 'DiskOrCreate'
          default: ""
      description: Represents a disk created on the cluster level
    v1.HotplugVolumeSource:
      type: object
      properties:
        dataVolume:
          $ref: '#/components/schemas/v1.DataVolumeSource'
        persistentVolumeClaim:
          $ref: '#/components/schemas/v1.PersistentVolumeClaimVolumeSource'
      description: HotplugVolumeSource Represents the source of a volume to mount
        which are capable of being hotplugged on a live running VMI. Only one of its
        members may be specified.
    v1.HotplugVolumeStatus:
      type: object
      properties:
        attachPodName:
          type: string
          description: AttachPodName is the name of the pod used to attach the volume
            to the node.
        attachPodUID:
          type: string
          description: AttachPodUID is the UID of the pod used to attach the volume
            to the node.
      description: HotplugVolumeStatus represents the hotplug status of the volume
    v1.Hugepages:
      type: object
      properties:
        pageSize:
          type: string
          description: "PageSize specifies the hugepage size, for x86_64 architecture\
            \ valid values are 1Gi and 2Mi."
      description: Hugepages allow to use hugepages for the VirtualMachineInstance
        instead of regular memory.
    v1.HyperVPassthrough:
      type: object
      properties:
        enabled:
          type: boolean
    v1.HypervTimer:
      type: object
      properties:
        present:
          type: boolean
          description: Enabled set to false makes sure that the machine type or a
            preset can't add the timer. Defaults to true.
    v1.I6300ESBWatchdog:
      type: object
      properties:
        action:
          type: string
          description: "The action to take. Valid values are poweroff, reset, shutdown.\
            \ Defaults to reset."
      description: i6300esb watchdog device.
    v1.InitrdInfo:
      type: object
      properties:
        checksum:
          type: integer
          description: Checksum is the checksum of the initrd file
          format: int64
      description: InitrdInfo show info about the initrd file
    v1.Input:
      required:
      - name
      - type
      type: object
      properties:
        bus:
          type: string
          description: "Bus indicates the bus of input device to emulate. Supported\
            \ values: virtio, usb."
        name:
          type: string
          description: Name is the device name
          default: ""
        type:
          type: string
          description: "Type indicated the type of input device. Supported values:\
            \ tablet."
          default: ""
    v1.InstancetypeMatcher:
      type: object
      properties:
        inferFromVolume:
          type: string
          description: InferFromVolume lists the name of a volume that should be used
            to infer or discover the instancetype to be used through known annotations
            on the underlying resource. Once applied to the InstancetypeMatcher this
            field is removed.
        inferFromVolumeFailurePolicy:
          type: string
          description: "InferFromVolumeFailurePolicy controls what should happen on\
            \ failure when inferring the instancetype. Allowed values are: \"RejectInferFromVolumeFailure\"\
            \ and \"IgnoreInferFromVolumeFailure\". If not specified, \"RejectInferFromVolumeFailure\"\
            \ is used by default."
        kind:
          type: string
          description: "Kind specifies which instancetype resource is referenced.\
            \ Allowed values are: \"VirtualMachineInstancetype\" and \"VirtualMachineClusterInstancetype\"\
            . If not specified, \"VirtualMachineClusterInstancetype\" is used by default."
        name:
          type: string
          description: Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
        revisionName:
          type: string
          description: RevisionName specifies a ControllerRevision containing a specific
            copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype
            to be used. This is initially captured the first time the instancetype
            is applied to the VirtualMachineInstance.
      description: InstancetypeMatcher references a instancetype that is used to fill
        fields in the VMI template.
    v1.Interface:
      required:
      - name
      type: object
      properties:
        acpiIndex:
          type: integer
          description: "If specified, the ACPI index is used to provide network interface\
            \ device naming, that is stable across changes in PCI addresses assigned\
            \ to the device. This value is required to be unique across all devices\
            \ and be between 1 and (16*1024-1)."
          format: int32
        binding:
          $ref: '#/components/schemas/v1.PluginBinding'
        bootOrder:
          type: integer
          description: "BootOrder is an integer value > 0, used to determine ordering\
            \ of boot devices. Lower values take precedence. Each interface or disk\
            \ that has a boot order must have a unique value. Interfaces without a\
            \ boot order are not tried."
          format: int32
        bridge:
          $ref: '#/components/schemas/v1.InterfaceBridge'
        dhcpOptions:
          $ref: '#/components/schemas/v1.DHCPOptions'
        macAddress:
          type: string
          description: "Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF."
        macvtap:
          $ref: '#/components/schemas/v1.DeprecatedInterfaceMacvtap'
        masquerade:
          $ref: '#/components/schemas/v1.InterfaceMasquerade'
        model:
          type: string
          description: "Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139,\
            \ virtio. Defaults to virtio."
        name:
          type: string
          description: Logical name of the interface as well as a reference to the
            associated networks. Must match the Name of a Network.
          default: ""
        passt:
          $ref: '#/components/schemas/v1.InterfacePasst'
        pciAddress:
          type: string
          description: "If specified, the virtual network interface will be placed\
            \ on the guests pci address with the specified PCI address. For example:\
            \ 0000:81:01.10"
        ports:
          type: array
          description: List of ports to be forwarded to the virtual machine.
          items:
            $ref: '#/components/schemas/v1.Port'
        slirp:
          $ref: '#/components/schemas/v1.DeprecatedInterfaceSlirp'
        sriov:
          $ref: '#/components/schemas/v1.InterfaceSRIOV'
        state:
          type: string
          description: "State represents the requested operational state of the interface.\
            \ The (only) value supported is `absent`, expressing a request to remove\
            \ the interface."
        tag:
          type: string
          description: "If specified, the virtual network interface address and its\
            \ tag will be provided to the guest via config drive"
    v1.InterfaceBindingMigration:
      type: object
      properties:
        method:
          type: string
          description: "Method defines a pre-defined migration methodology version:\
            \ 1alphav1"
    v1.InterfaceBindingPlugin:
      type: object
      properties:
        domainAttachmentType:
          type: string
          description: "DomainAttachmentType is a standard domain network attachment\
            \ method kubevirt supports. Supported values: \"tap\". The standard domain\
            \ attachment can be used instead or in addition to the sidecarImage. version:\
            \ 1alphav1"
        downwardAPI:
          type: string
          description: "DownwardAPI specifies what kind of data should be exposed\
            \ to the binding plugin sidecar. Supported values: \"device-info\" version:\
            \ v1alphav1"
        migration:
          $ref: '#/components/schemas/v1.InterfaceBindingMigration'
        networkAttachmentDefinition:
          type: string
          description: "NetworkAttachmentDefinition references to a NetworkAttachmentDefinition\
            \ CR object. Format: <name>, <namespace>/<name>. If namespace is not specified,\
            \ VMI namespace is assumed. version: 1alphav1"
        sidecarImage:
          type: string
          description: "SidecarImage references a container image that runs in the\
            \ virt-launcher pod. The sidecar handles (libvirt) domain configuration\
            \ and optional services. version: 1alphav1"
    v1.InterfaceBridge:
      type: object
      description: InterfaceBridge connects to a given network via a linux bridge.
    v1.InterfaceMasquerade:
      type: object
      description: InterfaceMasquerade connects to a given network using netfilter
        rules to nat the traffic.
    v1.InterfacePasst:
      type: object
      description: InterfacePasst connects to a given network.
    v1.InterfaceSRIOV:
      type: object
      description: InterfaceSRIOV connects to a given network by passing-through an
        SR-IOV PCI device via vfio.
    v1.KSMConfiguration:
      type: object
      properties:
        nodeLabelSelector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
      description: KSMConfiguration holds information about KSM.
    v1.KVMTimer:
      type: object
      properties:
        present:
          type: boolean
          description: Enabled set to false makes sure that the machine type or a
            preset can't add the timer. Defaults to true.
    v1.KernelBoot:
      type: object
      properties:
        container:
          $ref: '#/components/schemas/v1.KernelBootContainer'
        kernelArgs:
          type: string
          description: Arguments to be passed to the kernel at boot time
      description: "Represents the firmware blob used to assist in the kernel boot\
        \ process. Used for setting the kernel, initrd and command line arguments"
    v1.KernelBootContainer:
      required:
      - image
      type: object
      properties:
        image:
          type: string
          description: Image that contains initrd / kernel files.
          default: ""
        imagePullPolicy:
          type: string
          description: |-
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

            Possible enum values:
             - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
             - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
             - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
          enum:
          - Always
          - IfNotPresent
          - Never
        imagePullSecret:
          type: string
          description: ImagePullSecret is the name of the Docker registry secret required
            to pull the image. The secret must already exist.
        initrdPath:
          type: string
          description: the fully-qualified path to the ramdisk image in the host OS
        kernelPath:
          type: string
          description: The fully-qualified path to the kernel image in the host OS
      description: "If set, the VM will be booted from the defined kernel / initrd."
    v1.KernelBootStatus:
      type: object
      properties:
        initrdInfo:
          $ref: '#/components/schemas/v1.InitrdInfo'
        kernelInfo:
          $ref: '#/components/schemas/v1.KernelInfo'
      description: KernelBootStatus contains info about the kernelBootContainer
    v1.KernelInfo:
      type: object
      properties:
        checksum:
          type: integer
          description: Checksum is the checksum of the kernel image
          format: int64
      description: KernelInfo show info about the kernel image
    v1.KubeVirt:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.KubeVirtSpec'
        status:
          $ref: '#/components/schemas/v1.KubeVirtStatus'
      description: KubeVirt represents the object deploying all KubeVirt resources
    v1.KubeVirtCertificateRotateStrategy:
      type: object
      properties:
        selfSigned:
          $ref: '#/components/schemas/v1.KubeVirtSelfSignConfiguration'
    v1.KubeVirtCondition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
      description: KubeVirtCondition represents a condition of a KubeVirt deployment
    v1.KubeVirtConfiguration:
      type: object
      properties:
        additionalGuestMemoryOverheadRatio:
          type: string
          description: "AdditionalGuestMemoryOverheadRatio can be used to increase\
            \ the virtualization infrastructure overhead. This is useful, since the\
            \ calculation of this overhead is not accurate and cannot be entirely\
            \ known in advance. The ratio that is being set determines by which factor\
            \ to increase the overhead calculated by Kubevirt. A higher ratio means\
            \ that the VMs would be less compromised by node pressures, but would\
            \ mean that fewer VMs could be scheduled to a node. If not set, the default\
            \ is 1."
        apiConfiguration:
          $ref: '#/components/schemas/v1.ReloadableComponentConfiguration'
        architectureConfiguration:
          $ref: '#/components/schemas/v1.ArchConfiguration'
        autoCPULimitNamespaceLabelSelector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        controllerConfiguration:
          $ref: '#/components/schemas/v1.ReloadableComponentConfiguration'
        cpuModel:
          type: string
        cpuRequest:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        defaultRuntimeClass:
          type: string
        developerConfiguration:
          $ref: '#/components/schemas/v1.DeveloperConfiguration'
        emulatedMachines:
          type: array
          description: Deprecated. Use architectureConfiguration instead.
          items:
            type: string
            default: ""
        evictionStrategy:
          type: string
          description: EvictionStrategy defines at the cluster level if the VirtualMachineInstance
            should be migrated instead of shut-off in case of a node drain. If the
            VirtualMachineInstance specific field is set it overrides the cluster
            level one.
        handlerConfiguration:
          $ref: '#/components/schemas/v1.ReloadableComponentConfiguration'
        imagePullPolicy:
          type: string
          description: |-
            Possible enum values:
             - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
             - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
             - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
          enum:
          - Always
          - IfNotPresent
          - Never
        ksmConfiguration:
          $ref: '#/components/schemas/v1.KSMConfiguration'
        liveUpdateConfiguration:
          $ref: '#/components/schemas/v1.LiveUpdateConfiguration'
        machineType:
          type: string
          description: Deprecated. Use architectureConfiguration instead.
        mediatedDevicesConfiguration:
          $ref: '#/components/schemas/v1.MediatedDevicesConfiguration'
        memBalloonStatsPeriod:
          type: integer
          format: int64
        migrations:
          $ref: '#/components/schemas/v1.MigrationConfiguration'
        minCPUModel:
          type: string
        network:
          $ref: '#/components/schemas/v1.NetworkConfiguration'
        obsoleteCPUModels:
          type: object
          additionalProperties:
            type: boolean
            default: false
        ovmfPath:
          type: string
          description: Deprecated. Use architectureConfiguration instead.
        permittedHostDevices:
          $ref: '#/components/schemas/v1.PermittedHostDevices'
        seccompConfiguration:
          $ref: '#/components/schemas/v1.SeccompConfiguration'
        selinuxLauncherType:
          type: string
        smbios:
          $ref: '#/components/schemas/v1.SMBiosConfiguration'
        supportContainerResources:
          type: array
          description: SupportContainerResources specifies the resource requirements
            for various types of supporting containers such as container disks/virtiofs/sidecars
            and hotplug attachment pods. If omitted a sensible default will be supplied.
          items:
            $ref: '#/components/schemas/v1.SupportContainerResources'
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - type
        supportedGuestAgentVersions:
          type: array
          description: deprecated
          items:
            type: string
            default: ""
        tlsConfiguration:
          $ref: '#/components/schemas/v1.TLSConfiguration'
        virtualMachineInstancesPerNode:
          type: integer
          format: int32
        virtualMachineOptions:
          $ref: '#/components/schemas/v1.VirtualMachineOptions'
        vmRolloutStrategy:
          type: string
          description: VMRolloutStrategy defines how changes to a VM object propagate
            to its VMI
        vmStateStorageClass:
          type: string
          description: "VMStateStorageClass is the name of the storage class to use\
            \ for the PVCs created to preserve VM state, like TPM. The storage class\
            \ must support RWX in filesystem mode."
        webhookConfiguration:
          $ref: '#/components/schemas/v1.ReloadableComponentConfiguration'
      description: KubeVirtConfiguration holds all kubevirt configurations
    v1.KubeVirtList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.KubeVirt'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: KubeVirtList is a list of KubeVirts
    v1.KubeVirtSelfSignConfiguration:
      type: object
      properties:
        ca:
          $ref: '#/components/schemas/v1.CertConfig'
        caOverlapInterval:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
        caRotateInterval:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
        certRotateInterval:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
        server:
          $ref: '#/components/schemas/v1.CertConfig'
    v1.KubeVirtSpec:
      type: object
      properties:
        certificateRotateStrategy:
          $ref: '#/components/schemas/v1.KubeVirtCertificateRotateStrategy'
        configuration:
          $ref: '#/components/schemas/v1.KubeVirtConfiguration'
        customizeComponents:
          $ref: '#/components/schemas/v1.CustomizeComponents'
        imagePullPolicy:
          type: string
          description: |-
            The ImagePullPolicy to use.

            Possible enum values:
             - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
             - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
             - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
          enum:
          - Always
          - IfNotPresent
          - Never
        imagePullSecrets:
          type: array
          description: The imagePullSecrets to pull the container images from Defaults
            to none
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
          x-kubernetes-list-type: atomic
        imageRegistry:
          type: string
          description: The image registry to pull the container images from Defaults
            to the same registry the operator's container image is pulled from.
        imageTag:
          type: string
          description: The image tag to use for the continer images installed. Defaults
            to the same tag as the operator's container image.
        infra:
          $ref: '#/components/schemas/v1.ComponentConfig'
        monitorAccount:
          type: string
          description: The name of the Prometheus service account that needs read-access
            to KubeVirt endpoints Defaults to prometheus-k8s
        monitorNamespace:
          type: string
          description: The namespace Prometheus is deployed in Defaults to openshift-monitor
        productComponent:
          type: string
          description: "Designate the apps.kubevirt.io/component label for KubeVirt\
            \ components. Useful if KubeVirt is included as part of a product. If\
            \ ProductComponent is not specified, the component label default value\
            \ is kubevirt."
        productName:
          type: string
          description: "Designate the apps.kubevirt.io/part-of label for KubeVirt\
            \ components. Useful if KubeVirt is included as part of a product. If\
            \ ProductName is not specified, the part-of label will be omitted."
        productVersion:
          type: string
          description: "Designate the apps.kubevirt.io/version label for KubeVirt\
            \ components. Useful if KubeVirt is included as part of a product. If\
            \ ProductVersion is not specified, KubeVirt's version will be used."
        serviceMonitorNamespace:
          type: string
          description: |-
            The namespace the service monitor will be deployed
             When ServiceMonitorNamespace is set, then we'll install the service monitor object in that namespace
            otherwise we will use the monitoring namespace.
        uninstallStrategy:
          type: string
          description: Specifies if kubevirt can be deleted if workloads are still
            present. This is mainly a precaution to avoid accidental data loss
        workloadUpdateStrategy:
          $ref: '#/components/schemas/v1.KubeVirtWorkloadUpdateStrategy'
        workloads:
          $ref: '#/components/schemas/v1.ComponentConfig'
    v1.KubeVirtStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1.KubeVirtCondition'
        defaultArchitecture:
          type: string
        generations:
          type: array
          items:
            $ref: '#/components/schemas/v1.GenerationStatus'
          x-kubernetes-list-type: atomic
        observedDeploymentConfig:
          type: string
        observedDeploymentID:
          type: string
        observedGeneration:
          type: integer
          format: int64
        observedKubeVirtRegistry:
          type: string
        observedKubeVirtVersion:
          type: string
        operatorVersion:
          type: string
        outdatedVirtualMachineInstanceWorkloads:
          type: integer
          format: int32
        phase:
          type: string
        targetDeploymentConfig:
          type: string
        targetDeploymentID:
          type: string
        targetKubeVirtRegistry:
          type: string
        targetKubeVirtVersion:
          type: string
      description: KubeVirtStatus represents information pertaining to a KubeVirt
        deployment.
    v1.KubeVirtWorkloadUpdateStrategy:
      type: object
      properties:
        batchEvictionInterval:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
        batchEvictionSize:
          type: integer
          description: |-
            BatchEvictionSize Represents the number of VMIs that can be forced updated per the BatchShutdownInteral interval

            Defaults to 10
          format: int32
        workloadUpdateMethods:
          type: array
          description: |-
            WorkloadUpdateMethods defines the methods that can be used to disrupt workloads during automated workload updates. When multiple methods are present, the least disruptive method takes precedence over more disruptive methods. For example if both LiveMigrate and Shutdown methods are listed, only VMs which are not live migratable will be restarted/shutdown

            An empty list defaults to no automated workload updating
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
      description: KubeVirtWorkloadUpdateStrategy defines options related to updating
        a KubeVirt install
    v1.LaunchSecurity:
      type: object
      properties:
        sev:
          $ref: '#/components/schemas/v1.SEV'
    v1.LiveUpdateConfiguration:
      type: object
      properties:
        maxCpuSockets:
          type: integer
          description: MaxCpuSockets holds the maximum amount of sockets that can
            be hotplugged
          format: int64
        maxGuest:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        maxHotplugRatio:
          type: integer
          description: "MaxHotplugRatio is the ratio used to define the max amount\
            \ of a hotplug resource that can be made available to a VM when the specific\
            \ Max* setting is not defined (MaxCpuSockets, MaxGuest) Example: VM is\
            \ configured with 512Mi of guest memory, if MaxGuest is not defined and\
            \ MaxHotplugRatio is 2 then MaxGuest = 1Gi defaults to 4"
          format: int64
    v1.LogVerbosity:
      type: object
      properties:
        nodeVerbosity:
          type: object
          additionalProperties:
            type: integer
            format: int32
            default: 0
          description: NodeVerbosity represents a map of nodes with a specific verbosity
            level
        virtAPI:
          type: integer
          format: int32
        virtController:
          type: integer
          format: int32
        virtHandler:
          type: integer
          format: int32
        virtLauncher:
          type: integer
          format: int32
        virtOperator:
          type: integer
          format: int32
      description: LogVerbosity sets log verbosity level of  various components
    v1.LunTarget:
      type: object
      properties:
        bus:
          type: string
          description: "Bus indicates the type of disk device to emulate. supported\
            \ values: virtio, sata, scsi."
        readonly:
          type: boolean
          description: ReadOnly. Defaults to false.
        reservation:
          type: boolean
          description: Reservation indicates if the disk needs to support the persistent
            reservation for the SCSI disk
    v1.Machine:
      type: object
      properties:
        type:
          type: string
          description: QEMU machine type is the actual chipset of the VirtualMachineInstance.
          default: ""
    v1.MediatedDevicesConfiguration:
      type: object
      properties:
        mediatedDeviceTypes:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        mediatedDevicesTypes:
          type: array
          description: Deprecated. Use mediatedDeviceTypes instead.
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        nodeMediatedDeviceTypes:
          type: array
          items:
            $ref: '#/components/schemas/v1.NodeMediatedDeviceTypesConfig'
          x-kubernetes-list-type: atomic
      description: "MediatedDevicesConfiguration holds information about MDEV types\
        \ to be defined, if available"
    v1.MediatedHostDevice:
      required:
      - mdevNameSelector
      - resourceName
      type: object
      properties:
        externalResourceProvider:
          type: boolean
        mdevNameSelector:
          type: string
          default: ""
        resourceName:
          type: string
          default: ""
      description: MediatedHostDevice represents a host mediated device allowed for
        passthrough
    v1.Memory:
      type: object
      properties:
        guest:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        hugepages:
          $ref: '#/components/schemas/v1.Hugepages'
        maxGuest:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
      description: Memory allows specifying the VirtualMachineInstance memory features.
    v1.MemoryDumpVolumeSource:
      required:
      - claimName
      type: object
      properties:
        claimName:
          type: string
          description: "claimName is the name of a PersistentVolumeClaim in the same\
            \ namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
          default: ""
        hotpluggable:
          type: boolean
          description: Hotpluggable indicates whether the volume can be hotplugged
            and hotunplugged.
        readOnly:
          type: boolean
          description: readOnly Will force the ReadOnly setting in VolumeMounts. Default
            false.
    v1.MemoryStatus:
      type: object
      properties:
        guestAtBoot:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        guestCurrent:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        guestRequested:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
    v1.MigrateOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      description: MigrateOptions may be provided on migrate request.
    v1.MigrationConfiguration:
      type: object
      properties:
        allowAutoConverge:
          type: boolean
          description: AllowAutoConverge allows the platform to compromise performance/availability
            of VMIs to guarantee successful VMI live migrations. Defaults to false
        allowPostCopy:
          type: boolean
          description: "AllowPostCopy enables post-copy live migrations. Such migrations\
            \ allow even the busiest VMIs to successfully live-migrate. However, events\
            \ like a network failure can cause a VMI crash. If set to true, migrations\
            \ will still start in pre-copy, but switch to post-copy when CompletionTimeoutPerGiB\
            \ triggers. Defaults to false"
        bandwidthPerMigration:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        completionTimeoutPerGiB:
          type: integer
          description: "CompletionTimeoutPerGiB is the maximum number of seconds per\
            \ GiB a migration is allowed to take. If a live-migration takes longer\
            \ to migrate than this value multiplied by the size of the VMI, the migration\
            \ will be cancelled, unless AllowPostCopy is true. Defaults to 800"
          format: int64
        disableTLS:
          type: boolean
          description: "When set to true, DisableTLS will disable the additional layer\
            \ of live migration encryption provided by KubeVirt. This is usually a\
            \ bad idea. Defaults to false"
        matchSELinuxLevelOnMigration:
          type: boolean
          description: "By default, the SELinux level of target virt-launcher pods\
            \ is forced to the level of the source virt-launcher. When set to true,\
            \ MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level\
            \ to the target. That will ensure the target virt-launcher doesn't share\
            \ categories with another pod on the node. However, migrations will fail\
            \ when using RWX volumes that don't automatically deal with SELinux levels."
        network:
          type: string
          description: "Network is the name of the CNI network to use for live migrations.\
            \ By default, migrations go through the pod network."
        nodeDrainTaintKey:
          type: string
          description: "NodeDrainTaintKey defines the taint key that indicates a node\
            \ should be drained. Note: this option relies on the deprecated node taint\
            \ feature. Default: kubevirt.io/drain"
        parallelMigrationsPerCluster:
          type: integer
          description: ParallelMigrationsPerCluster is the total number of concurrent
            live migrations allowed cluster-wide. Defaults to 5
          format: int64
        parallelOutboundMigrationsPerNode:
          type: integer
          description: ParallelOutboundMigrationsPerNode is the maximum number of
            concurrent outgoing live migrations allowed per node. Defaults to 2
          format: int64
        progressTimeout:
          type: integer
          description: ProgressTimeout is the maximum number of seconds a live migration
            is allowed to make no progress. Hitting this timeout means a migration
            transferred 0 data for that many seconds. The migration is then considered
            stuck and therefore cancelled. Defaults to 150
          format: int64
        unsafeMigrationOverride:
          type: boolean
          description: UnsafeMigrationOverride allows live migrations to occur even
            if the compatibility check indicates the migration will be unsafe to the
            guest. Defaults to false
      description: MigrationConfiguration holds migration options. Can be overridden
        for specific groups of VMs though migration policies. Visit https://kubevirt.io/user-guide/operations/migration_policies/
        for more information.
    v1.MultusNetwork:
      required:
      - networkName
      type: object
      properties:
        default:
          type: boolean
          description: Select the default network and add it to the multus-cni.io/default-network
            annotation.
        networkName:
          type: string
          description: "References to a NetworkAttachmentDefinition CRD object. Format:\
            \ <networkName>, <namespace>/<networkName>. If namespace is not specified,\
            \ VMI namespace is assumed."
          default: ""
      description: Represents the multus cni network.
    v1.NUMA:
      type: object
      properties:
        guestMappingPassthrough:
          $ref: '#/components/schemas/v1.NUMAGuestMappingPassthrough'
    v1.NUMAGuestMappingPassthrough:
      type: object
      description: "NUMAGuestMappingPassthrough instructs kubevirt to model numa topology\
        \ which is compatible with the CPU pinning on the guest. This will result\
        \ in a subset of the node numa topology being passed through, ensuring that\
        \ virtual numa nodes and their memory never cross boundaries coming from the\
        \ node numa mapping."
    v1.Network:
      required:
      - name
      type: object
      properties:
        multus:
          $ref: '#/components/schemas/v1.MultusNetwork'
        name:
          type: string
          description: "Network name. Must be a DNS_LABEL and unique within the vm.\
            \ More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
          default: ""
        pod:
          $ref: '#/components/schemas/v1.PodNetwork'
      description: Network represents a network type and a resource that should be
        connected to the vm.
    v1.NetworkConfiguration:
      type: object
      properties:
        binding:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v1.InterfaceBindingPlugin'
        defaultNetworkInterface:
          type: string
        permitBridgeInterfaceOnPodNetwork:
          type: boolean
        permitSlirpInterface:
          type: boolean
          description: "DeprecatedPermitSlirpInterface is an alias for the deprecated\
            \ PermitSlirpInterface. Deprecated: Removed in v1.3."
      description: NetworkConfiguration holds network options
    v1.NoCloudSSHPublicKeyAccessCredentialPropagation:
      type: object
    v1.NodeMediatedDeviceTypesConfig:
      required:
      - nodeSelector
      type: object
      properties:
        mediatedDeviceTypes:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        mediatedDevicesTypes:
          type: array
          description: Deprecated. Use mediatedDeviceTypes instead.
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "NodeSelector is a selector which must be true for the vmi\
            \ to fit on a node. Selector which must match a node's labels for the\
            \ vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
      description: NodeMediatedDeviceTypesConfig holds information about MDEV types
        to be defined in a specific node that matches the NodeSelector field.
    v1.NodePlacement:
      type: object
      properties:
        affinity:
          $ref: '#/components/schemas/k8s.io.api.core.v1.Affinity'
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "nodeSelector is the node selector applied to the relevant\
            \ kind of pods It specifies a map of key-value pairs: for the pod to be\
            \ eligible to run on a node, the node must have each of the indicated\
            \ key-value pairs as labels (it can have additional labels as well). See\
            \ https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector"
        tolerations:
          type: array
          description: tolerations is a list of tolerations applied to the relevant
            kind of pods See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
            for more info. These are additional tolerations other than default ones.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.Toleration'
      description: NodePlacement describes node scheduling configuration.
    v1.PITTimer:
      type: object
      properties:
        present:
          type: boolean
          description: Enabled set to false makes sure that the machine type or a
            preset can't add the timer. Defaults to true.
        tickPolicy:
          type: string
          description: "TickPolicy determines what happens when QEMU misses a deadline\
            \ for injecting a tick to the guest. One of \"delay\", \"catchup\", \"\
            discard\"."
    v1.PauseOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      description: PauseOptions may be provided on pause request.
    v1.PciHostDevice:
      required:
      - pciVendorSelector
      - resourceName
      type: object
      properties:
        externalResourceProvider:
          type: boolean
          description: "If true, KubeVirt will leave the allocation and monitoring\
            \ to an external device plugin"
        pciVendorSelector:
          type: string
          description: The vendor_id:product_id tuple of the PCI device
          default: ""
        resourceName:
          type: string
          description: The name of the resource that is representing the device. Exposed
            by a device plugin and requested by VMs. Typically of the form vendor.com/product_name
          default: ""
      description: PciHostDevice represents a host PCI device allowed for passthrough
    v1.PermittedHostDevices:
      type: object
      properties:
        mediatedDevices:
          type: array
          items:
            $ref: '#/components/schemas/v1.MediatedHostDevice'
          x-kubernetes-list-type: atomic
        pciHostDevices:
          type: array
          items:
            $ref: '#/components/schemas/v1.PciHostDevice'
          x-kubernetes-list-type: atomic
        usb:
          type: array
          items:
            $ref: '#/components/schemas/v1.USBHostDevice'
          x-kubernetes-list-type: atomic
      description: PermittedHostDevices holds information about devices allowed for
        passthrough
    v1.PersistentVolumeClaimInfo:
      type: object
      properties:
        accessModes:
          type: array
          description: "AccessModes contains the desired access modes the volume should\
            \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        capacity:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
          description: Capacity represents the capacity set on the corresponding PVC
            status
        filesystemOverhead:
          type: string
          description: Percentage of filesystem's size to be reserved when resizing
            the PVC
        preallocated:
          type: boolean
          description: Preallocated indicates if the PVC's storage is preallocated
            or not
        requests:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
          description: Requests represents the resources requested by the corresponding
            PVC spec
        volumeMode:
          type: string
          description: |-
            VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.

            Possible enum values:
             - `"Block"` means the volume will not be formatted with a filesystem and will remain a raw block device.
             - `"Filesystem"` means the volume will be or is formatted with a filesystem.
          enum:
          - Block
          - Filesystem
      description: PersistentVolumeClaimInfo contains the relavant information virt-handler
        needs cached about a PVC
    v1.PersistentVolumeClaimVolumeSource:
      required:
      - claimName
      type: object
      properties:
        claimName:
          type: string
          description: "claimName is the name of a PersistentVolumeClaim in the same\
            \ namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
          default: ""
        hotpluggable:
          type: boolean
          description: Hotpluggable indicates whether the volume can be hotplugged
            and hotunplugged.
        readOnly:
          type: boolean
          description: readOnly Will force the ReadOnly setting in VolumeMounts. Default
            false.
      description: "PersistentVolumeClaimVolumeSource represents a reference to a\
        \ PersistentVolumeClaim in the same namespace. Directly attached to the vmi\
        \ via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
    v1.PluginBinding:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "Name references to the binding name as denined in the kubevirt\
            \ CR. version: 1alphav1"
          default: ""
      description: PluginBinding represents a binding implemented in a plugin.
    v1.PodNetwork:
      type: object
      properties:
        vmIPv6NetworkCIDR:
          type: string
          description: IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if
            not specified.
        vmNetworkCIDR:
          type: string
          description: CIDR for vm network. Default 10.0.2.0/24 if not specified.
      description: Represents the stock pod network interface.
    v1.Port:
      required:
      - port
      type: object
      properties:
        name:
          type: string
          description: "If specified, this must be an IANA_SVC_NAME and unique within\
            \ the pod. Each named port in a pod must have a unique name. Name for\
            \ the port that can be referred to by services."
        port:
          type: integer
          description: "Number of port to expose for the virtual machine. This must\
            \ be a valid port number, 0 < x < 65536."
          format: int32
          default: 0
        protocol:
          type: string
          description: Protocol for port. Must be UDP or TCP. Defaults to "TCP".
      description: Port represents a port to expose from the virtual machine. Default
        protocol TCP. The port field is mandatory
    v1.PreferenceMatcher:
      type: object
      properties:
        inferFromVolume:
          type: string
          description: InferFromVolume lists the name of a volume that should be used
            to infer or discover the preference to be used through known annotations
            on the underlying resource. Once applied to the PreferenceMatcher this
            field is removed.
        inferFromVolumeFailurePolicy:
          type: string
          description: "InferFromVolumeFailurePolicy controls what should happen on\
            \ failure when preference the instancetype. Allowed values are: \"RejectInferFromVolumeFailure\"\
            \ and \"IgnoreInferFromVolumeFailure\". If not specified, \"RejectInferFromVolumeFailure\"\
            \ is used by default."
        kind:
          type: string
          description: "Kind specifies which preference resource is referenced. Allowed\
            \ values are: \"VirtualMachinePreference\" and \"VirtualMachineClusterPreference\"\
            . If not specified, \"VirtualMachineClusterPreference\" is used by default."
        name:
          type: string
          description: Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference
        revisionName:
          type: string
          description: RevisionName specifies a ControllerRevision containing a specific
            copy of the VirtualMachinePreference or VirtualMachineClusterPreference
            to be used. This is initially captured the first time the instancetype
            is applied to the VirtualMachineInstance.
      description: PreferenceMatcher references a set of preference that is used to
        fill fields in the VMI template.
    v1.Probe:
      type: object
      properties:
        exec:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ExecAction'
        failureThreshold:
          type: integer
          description: Minimum consecutive failures for the probe to be considered
            failed after having succeeded. Defaults to 3. Minimum value is 1.
          format: int32
        guestAgentPing:
          $ref: '#/components/schemas/v1.GuestAgentPing'
        httpGet:
          $ref: '#/components/schemas/k8s.io.api.core.v1.HTTPGetAction'
        initialDelaySeconds:
          type: integer
          description: "Number of seconds after the VirtualMachineInstance has started\
            \ before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
          format: int32
        periodSeconds:
          type: integer
          description: How often (in seconds) to perform the probe. Default to 10
            seconds. Minimum value is 1.
          format: int32
        successThreshold:
          type: integer
          description: Minimum consecutive successes for the probe to be considered
            successful after having failed. Defaults to 1. Must be 1 for liveness.
            Minimum value is 1.
          format: int32
        tcpSocket:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TCPSocketAction'
        timeoutSeconds:
          type: integer
          description: "Number of seconds after which the probe times out. For exec\
            \ probes the timeout fails the probe but does not terminate the command\
            \ running on the guest. This means a blocking command can result in an\
            \ increasing load on the guest. A small buffer will be added to the resulting\
            \ workload exec probe to compensate for delays caused by the qemu guest\
            \ exec mechanism. Defaults to 1 second. Minimum value is 1. More info:\
            \ https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
          format: int32
      description: Probe describes a health check to be performed against a VirtualMachineInstance
        to determine whether it is alive or ready to receive traffic.
    v1.QemuGuestAgentSSHPublicKeyAccessCredentialPropagation:
      required:
      - users
      type: object
      properties:
        users:
          type: array
          description: Users represents a list of guest users that should have the
            ssh public keys added to their authorized_keys file.
          items:
            type: string
            default: ""
          x-kubernetes-list-type: set
    v1.QemuGuestAgentUserPasswordAccessCredentialPropagation:
      type: object
    v1.RESTClientConfiguration:
      type: object
      properties:
        rateLimiter:
          $ref: '#/components/schemas/v1.RateLimiter'
      description: RESTClientConfiguration allows configuring certain aspects of the
        k8s rest client.
    v1.RTCTimer:
      type: object
      properties:
        present:
          type: boolean
          description: Enabled set to false makes sure that the machine type or a
            preset can't add the timer. Defaults to true.
        tickPolicy:
          type: string
          description: "TickPolicy determines what happens when QEMU misses a deadline\
            \ for injecting a tick to the guest. One of \"delay\", \"catchup\"."
        track:
          type: string
          description: Track the guest or the wall clock.
    v1.RateLimiter:
      type: object
      properties:
        tokenBucketRateLimiter:
          $ref: '#/components/schemas/v1.TokenBucketRateLimiter'
    v1.Realtime:
      type: object
      properties:
        mask:
          type: string
          description: "Mask defines the vcpu mask expression that defines which vcpus\
            \ are used for realtime. Format matches libvirt's expressions. Example:\
            \ \"0-3,^1\",\"0,2,3\",\"2-3\""
      description: Realtime holds the tuning knobs specific for realtime workloads.
    v1.ReloadableComponentConfiguration:
      type: object
      properties:
        restClient:
          $ref: '#/components/schemas/v1.RESTClientConfiguration'
      description: ReloadableComponentConfiguration holds all generic k8s configuration
        options which can be reloaded by components without requiring a restart.
    v1.RemoveVolumeOptions:
      required:
      - name
      type: object
      properties:
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        name:
          type: string
          description: Name represents the name that maps to both the disk and volume
            that should be removed
          default: ""
      description: RemoveVolumeOptions is provided when dynamically hot unplugging
        volume and disk
    v1.ResourceRequirements:
      type: object
      properties:
        limits:
          type: object
          properties: {}
          description: Limits describes the maximum amount of compute resources allowed.
            Valid resource keys are "memory" and "cpu".
        overcommitGuestOverhead:
          type: boolean
          description: Don't ask the scheduler to take the guest-management overhead
            into account. Instead put the overhead only into the container's memory
            limit. This can lead to crashes if all memory is in use on a node. Defaults
            to false.
        requests:
          type: object
          properties: {}
          description: Requests is a description of the initial vmi resources. Valid
            resource keys are "memory" and "cpu".
    v1.RestartOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        gracePeriodSeconds:
          type: integer
          description: "The duration in seconds before the object should be force-restarted.\
            \ Value must be non-negative integer. The value zero indicates, restart\
            \ immediately. If this value is nil, the default grace period for deletion\
            \ of the corresponding VMI for the specified type will be used to determine\
            \ on how much time to give the VMI to restart. Defaults to a per object\
            \ value if not specified. zero means restart immediately. Allowed Values:\
            \ nil and 0"
          format: int64
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      description: RestartOptions may be provided when deleting an API object.
    v1.Rng:
      type: object
      description: Rng represents the random device passed from host
    v1.SEV:
      type: object
      properties:
        attestation:
          $ref: '#/components/schemas/v1.SEVAttestation'
        dhCert:
          type: string
          description: Base64 encoded guest owner's Diffie-Hellman key.
        policy:
          $ref: '#/components/schemas/v1.SEVPolicy'
        session:
          type: string
          description: Base64 encoded session blob.
    v1.SEVAttestation:
      type: object
    v1.SEVMeasurementInfo:
      type: object
      properties:
        apiMajor:
          type: integer
          description: API major version of the SEV host.
          format: int32
        apiMinor:
          type: integer
          description: API minor version of the SEV host.
          format: int32
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        buildID:
          type: integer
          description: Build ID of the SEV host.
          format: int32
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        loaderSHA:
          type: string
          description: SHA256 of the loader binary
        measurement:
          type: string
          description: Base64 encoded launch measurement of the SEV guest.
        policy:
          type: integer
          description: Policy of the SEV guest.
          format: int32
      description: SEVMeasurementInfo contains information about the guest launch
        measurement.
    v1.SEVPlatformInfo:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        certChain:
          type: string
          description: Base64 encoded SEV certificate chain.
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        pdh:
          type: string
          description: Base64 encoded platform Diffie-Hellman key.
      description: SEVPlatformInfo contains information about the AMD SEV features
        for the node.
    v1.SEVPolicy:
      type: object
      properties:
        encryptedState:
          type: boolean
          description: SEV-ES is required. Defaults to false.
    v1.SEVSecretOptions:
      type: object
      properties:
        header:
          type: string
          description: Base64 encoded header needed to decrypt the secret.
        secret:
          type: string
          description: Base64 encoded encrypted launch secret.
      description: SEVSecretOptions is used to provide a secret for a running guest.
    v1.SEVSessionOptions:
      type: object
      properties:
        dhCert:
          type: string
          description: Base64 encoded guest owner's Diffie-Hellman key.
        session:
          type: string
          description: Base64 encoded session blob.
      description: SEVSessionOptions is used to provide SEV session parameters.
    v1.SMBiosConfiguration:
      type: object
      properties:
        family:
          type: string
        manufacturer:
          type: string
        product:
          type: string
        sku:
          type: string
        version:
          type: string
    v1.SSHPublicKeyAccessCredential:
      required:
      - propagationMethod
      - source
      type: object
      properties:
        propagationMethod:
          $ref: '#/components/schemas/v1.SSHPublicKeyAccessCredentialPropagationMethod'
        source:
          $ref: '#/components/schemas/v1.SSHPublicKeyAccessCredentialSource'
      description: SSHPublicKeyAccessCredential represents a source and propagation
        method for injecting ssh public keys into a vm guest
    v1.SSHPublicKeyAccessCredentialPropagationMethod:
      type: object
      properties:
        configDrive:
          $ref: '#/components/schemas/v1.ConfigDriveSSHPublicKeyAccessCredentialPropagation'
        noCloud:
          $ref: '#/components/schemas/v1.NoCloudSSHPublicKeyAccessCredentialPropagation'
        qemuGuestAgent:
          $ref: '#/components/schemas/v1.QemuGuestAgentSSHPublicKeyAccessCredentialPropagation'
      description: SSHPublicKeyAccessCredentialPropagationMethod represents the method
        used to inject a ssh public key into the vm guest. Only one of its members
        may be specified.
    v1.SSHPublicKeyAccessCredentialSource:
      type: object
      properties:
        secret:
          $ref: '#/components/schemas/v1.AccessCredentialSecretSource'
      description: SSHPublicKeyAccessCredentialSource represents where to retrieve
        the ssh key credentials Only one of its members may be specified.
    v1.SeccompConfiguration:
      type: object
      properties:
        virtualMachineInstanceProfile:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceProfile'
      description: SeccompConfiguration holds Seccomp configuration for Kubevirt components
    v1.SecretVolumeSource:
      type: object
      properties:
        optional:
          type: boolean
          description: Specify whether the Secret or it's keys must be defined
        secretName:
          type: string
          description: "Name of the secret in the pod's namespace to use. More info:\
            \ https://kubernetes.io/docs/concepts/storage/volumes#secret"
        volumeLabel:
          type: string
          description: "The volume label of the resulting disk inside the VMI. Different\
            \ bootstrapping mechanisms require different values. Typical values are\
            \ \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart)."
      description: SecretVolumeSource adapts a Secret into a volume.
    v1.ServiceAccountVolumeSource:
      type: object
      properties:
        serviceAccountName:
          type: string
          description: "Name of the service account in the pod's namespace to use.\
            \ More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
      description: ServiceAccountVolumeSource adapts a ServiceAccount into a volume.
    v1.SoundDevice:
      required:
      - name
      type: object
      properties:
        model:
          type: string
          description: "We only support ich9 or ac97. If SoundDevice is not set: No\
            \ sound card is emulated. If SoundDevice is set but Model is not: ich9"
        name:
          type: string
          description: User's defined name for this sound device
          default: ""
      description: Represents the user's configuration to emulate sound cards in the
        VMI.
    v1.StartOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        paused:
          type: boolean
          description: Indicates that VM will be started in paused state.
      description: StartOptions may be provided on start request.
    v1.StopOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        gracePeriod:
          type: integer
          description: this updates the VMIs terminationGracePeriodSeconds during
            shutdown
          format: int64
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      description: StopOptions may be provided when deleting an API object.
    v1.SupportContainerResources:
      required:
      - resources
      - type
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ResourceRequirements'
        type:
          type: string
          default: ""
      description: SupportContainerResources are used to specify the cpu/memory request
        and limits for the containers that support various features of Virtual Machines.
        These containers are usually idle and don't require a lot of memory or cpu.
    v1.SyNICTimer:
      type: object
      properties:
        direct:
          $ref: '#/components/schemas/v1.FeatureState'
        enabled:
          type: boolean
    v1.SysprepSource:
      type: object
      properties:
        configMap:
          $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
        secret:
          $ref: '#/components/schemas/k8s.io.api.core.v1.LocalObjectReference'
      description: Represents a Sysprep volume source.
    v1.TLSConfiguration:
      type: object
      properties:
        ciphers:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: set
        minTLSVersion:
          type: string
          description: |-
            MinTLSVersion is a way to specify the minimum protocol version that is acceptable for TLS connections. Protocol versions are based on the following most common TLS configurations:

              https://ssl-config.mozilla.org/

            Note that SSLv3.0 is not a supported protocol version due to well known vulnerabilities such as POODLE: https://en.wikipedia.org/wiki/POODLE
      description: TLSConfiguration holds TLS options
    v1.TPMDevice:
      type: object
      properties:
        persistent:
          type: boolean
          description: Persistent indicates the state of the TPM device should be
            kept accross reboots Defaults to false
    v1.Timer:
      type: object
      properties:
        hpet:
          $ref: '#/components/schemas/v1.HPETTimer'
        hyperv:
          $ref: '#/components/schemas/v1.HypervTimer'
        kvm:
          $ref: '#/components/schemas/v1.KVMTimer'
        pit:
          $ref: '#/components/schemas/v1.PITTimer'
        rtc:
          $ref: '#/components/schemas/v1.RTCTimer'
      description: Represents all available timers in a vmi.
    v1.TokenBucketRateLimiter:
      required:
      - burst
      - qps
      type: object
      properties:
        burst:
          type: integer
          description: "Maximum burst for throttle. If it's zero, the component default\
            \ will be used"
          format: int32
          default: 0
        qps:
          type: number
          description: "QPS indicates the maximum QPS to the apiserver from this client.\
            \ If it's zero, the component default will be used"
          format: float
          default: 0.0
    v1.TopologyHints:
      type: object
      properties:
        tscFrequency:
          type: integer
          format: int64
    v1.USBHostDevice:
      required:
      - resourceName
      type: object
      properties:
        externalResourceProvider:
          type: boolean
          description: "If true, KubeVirt will leave the allocation and monitoring\
            \ to an external device plugin"
        resourceName:
          type: string
          description: "Identifies the list of USB host devices. e.g: kubevirt.io/storage,\
            \ kubevirt.io/bootable-usb, etc"
          default: ""
        selectors:
          type: array
          items:
            $ref: '#/components/schemas/v1.USBSelector'
          x-kubernetes-list-type: atomic
    v1.USBSelector:
      required:
      - product
      - vendor
      type: object
      properties:
        product:
          type: string
          default: ""
        vendor:
          type: string
          default: ""
    v1.UnpauseOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        dryRun:
          type: array
          description: "When present, indicates that modifications should not be persisted.\
            \ An invalid or unrecognized dryRun directive will result in an error\
            \ response and no further processing of the request. Valid values are:\
            \ - All: all dry run stages will be processed"
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      description: UnpauseOptions may be provided on unpause request.
    v1.UserPasswordAccessCredential:
      required:
      - propagationMethod
      - source
      type: object
      properties:
        propagationMethod:
          $ref: '#/components/schemas/v1.UserPasswordAccessCredentialPropagationMethod'
        source:
          $ref: '#/components/schemas/v1.UserPasswordAccessCredentialSource'
      description: UserPasswordAccessCredential represents a source and propagation
        method for injecting user passwords into a vm guest Only one of its members
        may be specified.
    v1.UserPasswordAccessCredentialPropagationMethod:
      type: object
      properties:
        qemuGuestAgent:
          $ref: '#/components/schemas/v1.QemuGuestAgentUserPasswordAccessCredentialPropagation'
      description: UserPasswordAccessCredentialPropagationMethod represents the method
        used to inject a user passwords into the vm guest. Only one of its members
        may be specified.
    v1.UserPasswordAccessCredentialSource:
      type: object
      properties:
        secret:
          $ref: '#/components/schemas/v1.AccessCredentialSecretSource'
      description: UserPasswordAccessCredentialSource represents where to retrieve
        the user password credentials Only one of its members may be specified.
    v1.VGPUDisplayOptions:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled determines if a display addapter backed by a vGPU should
            be enabled or disabled on the guest. Defaults to true.
        ramFB:
          $ref: '#/components/schemas/v1.FeatureState'
    v1.VGPUOptions:
      type: object
      properties:
        display:
          $ref: '#/components/schemas/v1.VGPUDisplayOptions'
    v1.VirtualMachine:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineSpec'
        status:
          $ref: '#/components/schemas/v1.VirtualMachineStatus'
      description: VirtualMachine handles the VirtualMachines that are not running
        or are in a stopped state The VirtualMachine contains the template to create
        the VirtualMachineInstance. It also mirrors the running state of the created
        VirtualMachineInstance in its status.
    v1.VirtualMachineCondition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
      description: VirtualMachineCondition represents the state of VirtualMachine
    v1.VirtualMachineInstance:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceSpec'
        status:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceStatus'
      description: VirtualMachineInstance is *the* VirtualMachineInstance Definition.
        It represents a virtual machine in the runtime environment of kubernetes.
    v1.VirtualMachineInstanceCondition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
    v1.VirtualMachineInstanceFileSystem:
      required:
      - diskName
      - fileSystemType
      - mountPoint
      - totalBytes
      - usedBytes
      type: object
      properties:
        disk:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceFileSystemDisk'
        diskName:
          type: string
          default: ""
        fileSystemType:
          type: string
          default: ""
        mountPoint:
          type: string
          default: ""
        totalBytes:
          type: integer
          format: int32
          default: 0
        usedBytes:
          type: integer
          format: int32
          default: 0
      description: VirtualMachineInstanceFileSystem represents guest os disk
    v1.VirtualMachineInstanceFileSystemDisk:
      required:
      - busType
      type: object
      properties:
        busType:
          type: string
          default: ""
        serial:
          type: string
      description: VirtualMachineInstanceFileSystemDisk represents the guest os FS
        disks
    v1.VirtualMachineInstanceFileSystemInfo:
      required:
      - disks
      type: object
      properties:
        disks:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceFileSystem'
      description: VirtualMachineInstanceFileSystemInfo represents information regarding
        single guest os filesystem
    v1.VirtualMachineInstanceFileSystemList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceFileSystem'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineInstanceFileSystemList comprises the list of all
        filesystems on guest machine
    v1.VirtualMachineInstanceGuestAgentInfo:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        fsFreezeStatus:
          type: string
          description: FSFreezeStatus is the state of the fs of the guest it can be
            either frozen or thawed
        fsInfo:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceFileSystemInfo'
        guestAgentVersion:
          type: string
          description: GAVersion is a version of currently installed guest agent
        hostname:
          type: string
          description: Hostname represents FQDN of a guest
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        os:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceGuestOSInfo'
        supportedCommands:
          type: array
          description: Return command list the guest agent supports
          items:
            $ref: '#/components/schemas/v1.GuestAgentCommandInfo'
          x-kubernetes-list-type: atomic
        timezone:
          type: string
          description: Timezone is guest os current timezone
        userList:
          type: array
          description: UserList is a list of active guest OS users
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceGuestOSUser'
      description: VirtualMachineInstanceGuestAgentInfo represents information from
        the installed guest agent
    v1.VirtualMachineInstanceGuestOSInfo:
      type: object
      properties:
        id:
          type: string
          description: Guest OS Id
        kernelRelease:
          type: string
          description: Guest OS Kernel Release
        kernelVersion:
          type: string
          description: Kernel version of the Guest OS
        machine:
          type: string
          description: Machine type of the Guest OS
        name:
          type: string
          description: Name of the Guest OS
        prettyName:
          type: string
          description: Guest OS Pretty Name
        version:
          type: string
          description: Guest OS Version
        versionId:
          type: string
          description: Version ID of the Guest OS
    v1.VirtualMachineInstanceGuestOSUser:
      required:
      - userName
      type: object
      properties:
        domain:
          type: string
        loginTime:
          type: number
          format: double
        userName:
          type: string
          default: ""
      description: VirtualMachineGuestOSUser is the single user of the guest os
    v1.VirtualMachineInstanceGuestOSUserList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceGuestOSUser'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineInstanceGuestOSUserList comprises the list of all
        active users on guest machine
    v1.VirtualMachineInstanceList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstance'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineInstanceList is a list of VirtualMachines
    v1.VirtualMachineInstanceMigration:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceMigrationSpec'
        status:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceMigrationStatus'
      description: VirtualMachineInstanceMigration represents the object tracking
        a VMI's migration to another host in the cluster
    v1.VirtualMachineInstanceMigrationCondition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
    v1.VirtualMachineInstanceMigrationList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceMigration'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineInstanceMigrationList is a list of VirtualMachineMigrations
    v1.VirtualMachineInstanceMigrationPhaseTransitionTimestamp:
      type: object
      properties:
        phase:
          type: string
          description: "Phase is the status of the VirtualMachineInstanceMigrationPhase\
            \ in kubernetes world. It is not the VirtualMachineInstanceMigrationPhase\
            \ status, but partially correlates to it."
        phaseTransitionTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
      description: VirtualMachineInstanceMigrationPhaseTransitionTimestamp gives a
        timestamp in relation to when a phase is set on a vmi
    v1.VirtualMachineInstanceMigrationSpec:
      type: object
      properties:
        vmiName:
          type: string
          description: The name of the VMI to perform the migration on. VMI must exist
            in the migration objects namespace
    v1.VirtualMachineInstanceMigrationState:
      type: object
      properties:
        abortRequested:
          type: boolean
          description: Indicates that the migration has been requested to abort
        abortStatus:
          type: string
          description: Indicates the final status of the live migration abortion
        completed:
          type: boolean
          description: Indicates the migration completed
        endTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        failed:
          type: boolean
          description: Indicates that the migration failed
        failureReason:
          type: string
          description: Contains the reason why the migration failed
        migrationConfiguration:
          $ref: '#/components/schemas/v1.MigrationConfiguration'
        migrationPolicyName:
          type: string
          description: "Name of the migration policy. If string is empty, no policy\
            \ is matched"
        migrationUid:
          type: string
          description: The VirtualMachineInstanceMigration object associated with
            this migration
        mode:
          type: string
          description: Lets us know if the vmi is currently running pre or post copy
            migration
        sourceNode:
          type: string
          description: The source node that the VMI originated on
        sourcePod:
          type: string
        startTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        targetAttachmentPodUID:
          type: string
          description: The UID of the target attachment pod for hotplug volumes
        targetCPUSet:
          type: array
          description: "If the VMI requires dedicated CPUs, this field will hold the\
            \ dedicated CPU set on the target node"
          items:
            type: integer
            format: int32
            default: 0
          x-kubernetes-list-type: atomic
        targetDirectMigrationNodePorts:
          type: object
          additionalProperties:
            type: integer
            format: int32
            default: 0
          description: The list of ports opened for live migration on the destination
            node
        targetNode:
          type: string
          description: The target node that the VMI is moving to
        targetNodeAddress:
          type: string
          description: The address of the target node to use for the migration
        targetNodeDomainDetected:
          type: boolean
          description: The Target Node has seen the Domain Start Event
        targetNodeDomainReadyTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        targetNodeTopology:
          type: string
          description: "If the VMI requires dedicated CPUs, this field will hold the\
            \ numa topology on the target node"
        targetPod:
          type: string
          description: The target pod that the VMI is moving to
    v1.VirtualMachineInstanceMigrationStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceMigrationCondition'
        migrationState:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceMigrationState'
        phase:
          type: string
        phaseTransitionTimestamps:
          type: array
          description: PhaseTransitionTimestamp is the timestamp of when the last
            phase change occurred
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceMigrationPhaseTransitionTimestamp'
          x-kubernetes-list-type: atomic
      description: VirtualMachineInstanceMigration reprents information pertaining
        to a VMI's migration.
    v1.VirtualMachineInstanceNetworkInterface:
      type: object
      properties:
        infoSource:
          type: string
          description: "Specifies the origin of the interface data collected. values:\
            \ domain, guest-agent, multus-status."
        interfaceName:
          type: string
          description: The interface name inside the Virtual Machine
        ipAddress:
          type: string
          description: IP address of a Virtual Machine interface. It is always the
            first item of IPs
        ipAddresses:
          type: array
          description: List of all IP addresses of a Virtual Machine interface
          items:
            type: string
            default: ""
        mac:
          type: string
          description: Hardware address of a Virtual Machine interface
        name:
          type: string
          description: "Name of the interface, corresponds to name of the network\
            \ assigned to the interface"
        queueCount:
          type: integer
          description: Specifies how many queues are allocated by MultiQueue
          format: int32
    v1.VirtualMachineInstancePhaseTransitionTimestamp:
      type: object
      properties:
        phase:
          type: string
          description: "Phase is the status of the VirtualMachineInstance in kubernetes\
            \ world. It is not the VirtualMachineInstance status, but partially correlates\
            \ to it."
        phaseTransitionTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
      description: VirtualMachineInstancePhaseTransitionTimestamp gives a timestamp
        in relation to when a phase is set on a vmi
    v1.VirtualMachineInstancePreset:
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineInstancePresetSpec'
      description: |-
        Deprecated for removal in v2, please use VirtualMachineInstanceType and VirtualMachinePreference instead.

        VirtualMachineInstancePreset defines a VMI spec.domain to be applied to all VMIs that match the provided label selector More info: https://kubevirt.io/user-guide/virtual_machines/presets/#overrides
    v1.VirtualMachineInstancePresetList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstancePreset'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineInstancePresetList is a list of VirtualMachinePresets
    v1.VirtualMachineInstancePresetSpec:
      required:
      - selector
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/v1.DomainSpec'
        selector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
    v1.VirtualMachineInstanceProfile:
      type: object
      properties:
        customProfile:
          $ref: '#/components/schemas/v1.CustomProfile'
    v1.VirtualMachineInstanceReplicaSet:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceReplicaSetSpec'
        status:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceReplicaSetStatus'
      description: VirtualMachineInstance is *the* VirtualMachineInstance Definition.
        It represents a virtual machine in the runtime environment of kubernetes.
    v1.VirtualMachineInstanceReplicaSetCondition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
    v1.VirtualMachineInstanceReplicaSetList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceReplicaSet'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VMIList is a list of VMIs
    v1.VirtualMachineInstanceReplicaSetSpec:
      required:
      - selector
      - template
      type: object
      properties:
        paused:
          type: boolean
          description: Indicates that the replica set is paused.
        replicas:
          type: integer
          description: Number of desired pods. This is a pointer to distinguish between
            explicit zero and not specified. Defaults to 1.
          format: int32
        selector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        template:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceTemplateSpec'
    v1.VirtualMachineInstanceReplicaSetStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceReplicaSetCondition'
        labelSelector:
          type: string
          description: Canonical form of the label selector for HPA which consumes
            it through the scale subresource.
        readyReplicas:
          type: integer
          description: The number of ready replicas for this replica set.
          format: int32
        replicas:
          type: integer
          description: Total number of non-terminated pods targeted by this deployment
            (their labels match the selector).
          format: int32
    v1.VirtualMachineInstanceSpec:
      required:
      - domain
      type: object
      properties:
        accessCredentials:
          type: array
          description: Specifies a set of public keys to inject into the vm guest
          items:
            $ref: '#/components/schemas/v1.AccessCredential'
          x-kubernetes-list-type: atomic
        affinity:
          $ref: '#/components/schemas/k8s.io.api.core.v1.Affinity'
        architecture:
          type: string
          description: Specifies the architecture of the vm guest you are attempting
            to run. Defaults to the compiled architecture of the KubeVirt components
        dnsConfig:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PodDNSConfig'
        dnsPolicy:
          type: string
          description: |-
            Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.

            Possible enum values:
             - `"ClusterFirst"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
             - `"ClusterFirstWithHostNet"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
             - `"Default"` indicates that the pod should use the default (as determined by kubelet) DNS settings.
             - `"None"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
          enum:
          - ClusterFirst
          - ClusterFirstWithHostNet
          - Default
          - None
        domain:
          $ref: '#/components/schemas/v1.DomainSpec'
        evictionStrategy:
          type: string
          description: "EvictionStrategy describes the strategy to follow when a node\
            \ drain occurs. The possible options are: - \"None\": No action will be\
            \ taken, according to the specified 'RunStrategy' the VirtualMachine will\
            \ be restarted or shutdown. - \"LiveMigrate\": the VirtualMachineInstance\
            \ will be migrated instead of being shutdown. - \"LiveMigrateIfPossible\"\
            : the same as \"LiveMigrate\" but only if the VirtualMachine is Live-Migratable,\
            \ otherwise it will behave as \"None\". - \"External\": the VirtualMachineInstance\
            \ will be protected by a PDB and `vmi.Status.EvacuationNodeName` will\
            \ be set on eviction. This is mainly useful for cluster-api-provider-kubevirt\
            \ (capk) which needs a way for VMI's to be blocked from eviction, yet\
            \ signal capk that eviction has been called on the VMI so the capk controller\
            \ can handle tearing the VMI down. Details can be found in the commit\
            \ description https://github.com/kubevirt/kubevirt/commit/c1d77face705c8b126696bac9a3ee3825f27f1fa."
        hostname:
          type: string
          description: "Specifies the hostname of the vmi If not specified, the hostname\
            \ will be set to the name of the vmi, if dhcp or cloud-init is configured\
            \ properly."
        livenessProbe:
          $ref: '#/components/schemas/v1.Probe'
        networks:
          type: array
          description: List of networks that can be attached to a vm's virtual interface.
          items:
            $ref: '#/components/schemas/v1.Network'
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "NodeSelector is a selector which must be true for the vmi\
            \ to fit on a node. Selector which must match a node's labels for the\
            \ vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
        priorityClassName:
          type: string
          description: "If specified, indicates the pod's priority. If not specified,\
            \ the pod priority will be default or zero if there is no default."
        readinessProbe:
          $ref: '#/components/schemas/v1.Probe'
        schedulerName:
          type: string
          description: "If specified, the VMI will be dispatched by specified scheduler.\
            \ If not specified, the VMI will be dispatched by default scheduler."
        startStrategy:
          type: string
          description: StartStrategy can be set to "Paused" if Virtual Machine should
            be started in paused state.
        subdomain:
          type: string
          description: "If specified, the fully qualified vmi hostname will be \"\
            <hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not\
            \ specified, the vmi will not have a domainname at all. The DNS entry\
            \ will resolve to the vmi, no matter if the vmi itself can pick up a hostname."
        terminationGracePeriodSeconds:
          type: integer
          description: Grace period observed after signalling a VirtualMachineInstance
            to stop after which the VirtualMachineInstance is force terminated.
          format: int64
        tolerations:
          type: array
          description: "If toleration is specified, obey all the toleration rules."
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.Toleration'
        topologySpreadConstraints:
          type: array
          description: TopologySpreadConstraints describes how a group of VMIs will
            be spread across a given topology domains. K8s scheduler will schedule
            VMI pods in a way which abides by the constraints.
          items:
            $ref: '#/components/schemas/k8s.io.api.core.v1.TopologySpreadConstraint'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - topologyKey
          - whenUnsatisfiable
          x-kubernetes-patch-merge-key: topologyKey
        volumes:
          type: array
          description: List of volumes that can be mounted by disks belonging to the
            vmi.
          items:
            $ref: '#/components/schemas/v1.Volume'
      description: VirtualMachineInstanceSpec is a description of a VirtualMachineInstance.
    v1.VirtualMachineInstanceStatus:
      type: object
      properties:
        VSOCKCID:
          type: integer
          description: VSOCKCID is used to track the allocated VSOCK CID in the VM.
          format: int64
        activePods:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: ActivePods is a mapping of pod UID to node name. It is possible
            for multiple pods to be running for a single VMI during migration.
        conditions:
          type: array
          description: Conditions are specific points in VirtualMachineInstance's
            pod runtime.
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceCondition'
        currentCPUTopology:
          $ref: '#/components/schemas/v1.CPUTopology'
        evacuationNodeName:
          type: string
          description: EvacuationNodeName is used to track the eviction process of
            a VMI. It stores the name of the node that we want to evacuate. It is
            meant to be used by KubeVirt core components only and can't be set or
            modified by users.
        fsFreezeStatus:
          type: string
          description: FSFreezeStatus is the state of the fs of the guest it can be
            either frozen or thawed
        guestOSInfo:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceGuestOSInfo'
        interfaces:
          type: array
          description: Interfaces represent the details of available network interfaces.
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstanceNetworkInterface'
        kernelBootStatus:
          $ref: '#/components/schemas/v1.KernelBootStatus'
        launcherContainerImageVersion:
          type: string
          description: LauncherContainerImageVersion indicates what container image
            is currently active for the vmi.
        machine:
          $ref: '#/components/schemas/v1.Machine'
        memory:
          $ref: '#/components/schemas/v1.MemoryStatus'
        migrationMethod:
          type: string
          description: "Represents the method using which the vmi can be migrated:\
            \ live migration or block migration"
        migrationState:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceMigrationState'
        migrationTransport:
          type: string
          description: This represents the migration transport
        nodeName:
          type: string
          description: NodeName is the name where the VirtualMachineInstance is currently
            running.
        phase:
          type: string
          description: "Phase is the status of the VirtualMachineInstance in kubernetes\
            \ world. It is not the VirtualMachineInstance status, but partially correlates\
            \ to it."
        phaseTransitionTimestamps:
          type: array
          description: PhaseTransitionTimestamp is the timestamp of when the last
            phase change occurred
          items:
            $ref: '#/components/schemas/v1.VirtualMachineInstancePhaseTransitionTimestamp'
          x-kubernetes-list-type: atomic
        qosClass:
          type: string
          description: |-
            The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md

            Possible enum values:
             - `"BestEffort"` is the BestEffort qos class.
             - `"Burstable"` is the Burstable qos class.
             - `"Guaranteed"` is the Guaranteed qos class.
          enum:
          - BestEffort
          - Burstable
          - Guaranteed
        reason:
          type: string
          description: A brief CamelCase message indicating details about why the
            VMI is in this state. e.g. 'NodeUnresponsive'
        runtimeUser:
          type: integer
          description: RuntimeUser is used to determine what user will be used in
            launcher
          format: int64
          default: 0
        selinuxContext:
          type: string
          description: SELinuxContext is the actual SELinux context of the virt-launcher
            pod
        topologyHints:
          $ref: '#/components/schemas/v1.TopologyHints'
        virtualMachineRevisionName:
          type: string
          description: VirtualMachineRevisionName is used to get the vm revision of
            the vmi when doing an online vm snapshot
        volumeStatus:
          type: array
          description: VolumeStatus contains the statuses of all the volumes
          items:
            $ref: '#/components/schemas/v1.VolumeStatus'
          x-kubernetes-list-type: atomic
      description: VirtualMachineInstanceStatus represents information about the status
        of a VirtualMachineInstance. Status may trail the actual state of a system.
    v1.VirtualMachineInstanceTemplateSpec:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceSpec'
    v1.VirtualMachineList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.VirtualMachine'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineList is a list of virtualmachines
    v1.VirtualMachineMemoryDumpRequest:
      required:
      - claimName
      - phase
      type: object
      properties:
        claimName:
          type: string
          description: ClaimName is the name of the pvc that will contain the memory
            dump
          default: ""
        endTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        fileName:
          type: string
          description: FileName represents the name of the output file
        message:
          type: string
          description: Message is a detailed message about failure of the memory dump
        phase:
          type: string
          description: Phase represents the memory dump phase
          default: ""
        remove:
          type: boolean
          description: Remove represents request of dissociating the memory dump pvc
        startTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
      description: VirtualMachineMemoryDumpRequest represent the memory dump request
        phase and info
    v1.VirtualMachineOptions:
      type: object
      properties:
        disableFreePageReporting:
          $ref: '#/components/schemas/v1.DisableFreePageReporting'
        disableSerialConsoleLog:
          $ref: '#/components/schemas/v1.DisableSerialConsoleLog'
      description: VirtualMachineOptions holds the cluster level information regarding
        the virtual machine.
    v1.VirtualMachineSpec:
      required:
      - template
      type: object
      properties:
        dataVolumeTemplates:
          type: array
          description: dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance
            template can reference. DataVolumes in this list are dynamically created
            for the VirtualMachine and are tied to the VirtualMachine's life-cycle.
          items:
            $ref: '#/components/schemas/v1.DataVolumeTemplateSpec'
        instancetype:
          $ref: '#/components/schemas/v1.InstancetypeMatcher'
        preference:
          $ref: '#/components/schemas/v1.PreferenceMatcher'
        runStrategy:
          type: string
          description: Running state indicates the requested running state of the
            VirtualMachineInstance mutually exclusive with Running
        running:
          type: boolean
          description: Running controls whether the associatied VirtualMachineInstance
            is created or not Mutually exclusive with RunStrategy
        template:
          $ref: '#/components/schemas/v1.VirtualMachineInstanceTemplateSpec'
        updateVolumesStrategy:
          type: string
          description: UpdateVolumesStrategy is the strategy to apply on volumes updates
      description: VirtualMachineSpec describes how the proper VirtualMachine should
        look like
    v1.VirtualMachineStartFailure:
      type: object
      properties:
        consecutiveFailCount:
          type: integer
          format: int32
        lastFailedVMIUID:
          type: string
        retryAfterTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
      description: VirtualMachineStartFailure tracks VMIs which failed to transition
        successfully to running using the VM status
    v1.VirtualMachineStateChangeRequest:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: Indicates the type of action that is requested. e.g. Start
            or Stop
          default: ""
        data:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: Provides additional data in order to perform the Action
        uid:
          type: string
          description: Indicates the UUID of an existing Virtual Machine Instance
            that this change request applies to -- if applicable
    v1.VirtualMachineStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Hold the state information of the VirtualMachine and its VirtualMachineInstance
          items:
            $ref: '#/components/schemas/v1.VirtualMachineCondition'
        created:
          type: boolean
          description: Created indicates if the virtual machine is created in the
            cluster
        desiredGeneration:
          type: integer
          description: DesiredGeneration is the generation which is desired for the
            VMI. This will be used in comparisons with ObservedGeneration to understand
            when the VMI is out of sync. This will be changed at the same time as
            ObservedGeneration to remove errors which could occur if Generation is
            updated through an Update() before ObservedGeneration in Status.
          format: int64
        memoryDumpRequest:
          $ref: '#/components/schemas/v1.VirtualMachineMemoryDumpRequest'
        observedGeneration:
          type: integer
          description: ObservedGeneration is the generation observed by the vmi when
            started.
          format: int64
        printableStatus:
          type: string
          description: "PrintableStatus is a human readable, high-level representation\
            \ of the status of the virtual machine"
        ready:
          type: boolean
          description: Ready indicates if the virtual machine is running and ready
        restoreInProgress:
          type: string
          description: RestoreInProgress is the name of the VirtualMachineRestore
            currently executing
        runStrategy:
          type: string
          description: RunStrategy tracks the last recorded RunStrategy used by the
            VM. This is needed to correctly process the next strategy (for now only
            the RerunOnFailure)
        snapshotInProgress:
          type: string
          description: SnapshotInProgress is the name of the VirtualMachineSnapshot
            currently executing
        startFailure:
          $ref: '#/components/schemas/v1.VirtualMachineStartFailure'
        stateChangeRequests:
          type: array
          description: StateChangeRequests indicates a list of actions that should
            be taken on a VMI e.g. stop a specific VMI then start a new one.
          items:
            $ref: '#/components/schemas/v1.VirtualMachineStateChangeRequest'
        volumeRequests:
          type: array
          description: VolumeRequests indicates a list of volumes add or remove from
            the VMI template and hotplug on an active running VMI.
          items:
            $ref: '#/components/schemas/v1.VirtualMachineVolumeRequest'
          x-kubernetes-list-type: atomic
        volumeSnapshotStatuses:
          type: array
          description: VolumeSnapshotStatuses indicates a list of statuses whether
            snapshotting is supported by each volume.
          items:
            $ref: '#/components/schemas/v1.VolumeSnapshotStatus'
      description: VirtualMachineStatus represents the status returned by the controller
        to describe how the VirtualMachine is doing
    v1.VirtualMachineVolumeRequest:
      type: object
      properties:
        addVolumeOptions:
          $ref: '#/components/schemas/v1.AddVolumeOptions'
        removeVolumeOptions:
          $ref: '#/components/schemas/v1.RemoveVolumeOptions'
    v1.Volume:
      required:
      - name
      type: object
      properties:
        cloudInitConfigDrive:
          $ref: '#/components/schemas/v1.CloudInitConfigDriveSource'
        cloudInitNoCloud:
          $ref: '#/components/schemas/v1.CloudInitNoCloudSource'
        configMap:
          $ref: '#/components/schemas/v1.ConfigMapVolumeSource'
        containerDisk:
          $ref: '#/components/schemas/v1.ContainerDiskSource'
        dataVolume:
          $ref: '#/components/schemas/v1.DataVolumeSource'
        downwardAPI:
          $ref: '#/components/schemas/v1.DownwardAPIVolumeSource'
        downwardMetrics:
          $ref: '#/components/schemas/v1.DownwardMetricsVolumeSource'
        emptyDisk:
          $ref: '#/components/schemas/v1.EmptyDiskSource'
        ephemeral:
          $ref: '#/components/schemas/v1.EphemeralVolumeSource'
        hostDisk:
          $ref: '#/components/schemas/v1.HostDisk'
        memoryDump:
          $ref: '#/components/schemas/v1.MemoryDumpVolumeSource'
        name:
          type: string
          description: "Volume's name. Must be a DNS_LABEL and unique within the vmi.\
            \ More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
          default: ""
        persistentVolumeClaim:
          $ref: '#/components/schemas/v1.PersistentVolumeClaimVolumeSource'
        secret:
          $ref: '#/components/schemas/v1.SecretVolumeSource'
        serviceAccount:
          $ref: '#/components/schemas/v1.ServiceAccountVolumeSource'
        sysprep:
          $ref: '#/components/schemas/v1.SysprepSource'
      description: Volume represents a named volume in a vmi.
    v1.VolumeSnapshotStatus:
      required:
      - enabled
      - name
      type: object
      properties:
        enabled:
          type: boolean
          description: True if the volume supports snapshotting
          default: false
        name:
          type: string
          description: Volume name
          default: ""
        reason:
          type: string
          description: "Empty if snapshotting is enabled, contains reason otherwise"
    v1.VolumeStatus:
      required:
      - name
      - target
      type: object
      properties:
        containerDiskVolume:
          $ref: '#/components/schemas/v1.ContainerDiskInfo'
        hotplugVolume:
          $ref: '#/components/schemas/v1.HotplugVolumeStatus'
        memoryDumpVolume:
          $ref: '#/components/schemas/v1.DomainMemoryDumpInfo'
        message:
          type: string
          description: Message is a detailed message about the current hotplug volume
            phase
        name:
          type: string
          description: Name is the name of the volume
          default: ""
        persistentVolumeClaimInfo:
          $ref: '#/components/schemas/v1.PersistentVolumeClaimInfo'
        phase:
          type: string
          description: Phase is the phase
        reason:
          type: string
          description: Reason is a brief description of why we are in the current
            hotplug volume phase
        size:
          type: integer
          description: Represents the size of the volume
          format: int64
        target:
          type: string
          description: "Target is the target name used when adding the volume to the\
            \ VM, eg: vda"
          default: ""
      description: VolumeStatus represents information about the status of volumes
        attached to the VirtualMachineInstance.
    v1.Watchdog:
      required:
      - name
      type: object
      properties:
        i6300esb:
          $ref: '#/components/schemas/v1.I6300ESBWatchdog'
        name:
          type: string
          description: Name of the watchdog.
          default: ""
      description: Named watchdog device.
    v1alpha1.Condition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
      description: Condition defines conditions
    v1alpha1.Error:
      type: object
      properties:
        message:
          type: string
        time:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
      description: Error is the last error encountered during the snapshot/restore
    v1alpha1.MigrationPolicy:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.MigrationPolicySpec'
        status:
          $ref: '#/components/schemas/v1alpha1.MigrationPolicyStatus'
      description: MigrationPolicy holds migration policy (i.e. configurations) to
        apply to a VM or group of VMs
    v1alpha1.MigrationPolicyList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.MigrationPolicy'
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: MigrationPolicyList is a list of MigrationPolicy
    v1alpha1.MigrationPolicySpec:
      required:
      - selectors
      type: object
      properties:
        allowAutoConverge:
          type: boolean
        allowPostCopy:
          type: boolean
        bandwidthPerMigration:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        completionTimeoutPerGiB:
          type: integer
          format: int64
        selectors:
          $ref: '#/components/schemas/v1alpha1.Selectors'
    v1alpha1.MigrationPolicyStatus:
      type: object
    v1alpha1.PersistentVolumeClaim:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PersistentVolumeClaimSpec'
    v1alpha1.Selectors:
      type: object
      properties:
        namespaceSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
        virtualMachineInstanceSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
    v1alpha1.SnapshotVolumesLists:
      type: object
      properties:
        excludedVolumes:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: set
        includedVolumes:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: set
      description: SnapshotVolumesLists includes the list of volumes which were included
        in the snapshot and volumes which were excluded from the snapshot
    v1alpha1.SourceSpec:
      type: object
      properties:
        virtualMachine:
          $ref: '#/components/schemas/v1alpha1.VirtualMachine'
      description: SourceSpec contains the appropriate spec for the resource being
        snapshotted
    v1alpha1.VirtualMachine:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineSpec'
        status:
          $ref: '#/components/schemas/v1.VirtualMachineStatus'
    v1alpha1.VirtualMachineClone:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineCloneSpec'
        status:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineCloneStatus'
      description: VirtualMachineClone is a CRD that clones one VM into another.
    v1alpha1.VirtualMachineCloneList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineClone'
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineCloneList is a list of MigrationPolicy
    v1alpha1.VirtualMachineCloneSpec:
      required:
      - source
      type: object
      properties:
        annotationFilters:
          type: array
          description: "Example use: \"!some/key*\". For a detailed description, please\
            \ refer to https://kubevirt.io/user-guide/operations/clone_api/#label-annotation-filters."
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        labelFilters:
          type: array
          description: "Example use: \"!some/key*\". For a detailed description, please\
            \ refer to https://kubevirt.io/user-guide/operations/clone_api/#label-annotation-filters."
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        newMacAddresses:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: "NewMacAddresses manually sets that target interfaces' mac\
            \ addresses. The key is the interface name and the value is the new mac\
            \ address. If this field is not specified, a new MAC address will be generated\
            \ automatically, as for any interface that is not included in this map."
        newSMBiosSerial:
          type: string
          description: "NewSMBiosSerial manually sets that target's SMbios serial.\
            \ If this field is not specified, a new serial will be generated automatically."
        source:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
        target:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
        template:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineCloneTemplateFilters'
    v1alpha1.VirtualMachineCloneStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.Condition'
          x-kubernetes-list-type: atomic
        creationTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        phase:
          type: string
        restoreName:
          type: string
        snapshotName:
          type: string
        targetName:
          type: string
    v1alpha1.VirtualMachineCloneTemplateFilters:
      type: object
      properties:
        annotationFilters:
          type: array
          description: "Example use: \"!some/key*\". For a detailed description, please\
            \ refer to https://kubevirt.io/user-guide/operations/clone_api/#label-annotation-filters."
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        labelFilters:
          type: array
          description: "Example use: \"!some/key*\". For a detailed description, please\
            \ refer to https://kubevirt.io/user-guide/operations/clone_api/#label-annotation-filters."
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
    v1alpha1.VirtualMachineExport:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineExportSpec'
        status:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineExportStatus'
      description: VirtualMachineExport defines the operation of exporting a VM source
    v1alpha1.VirtualMachineExportLink:
      required:
      - cert
      type: object
      properties:
        cert:
          type: string
          description: Cert is the public CA certificate base64 encoded
          default: ""
        manifests:
          type: array
          description: Manifests is a list of available manifests for the export
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineExportManifest'
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - type
        volumes:
          type: array
          description: Volumes is a list of available volumes to export
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineExportVolume'
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - name
      description: "VirtualMachineExportLink contains a list of volumes available\
        \ for export, as well as the URLs to obtain these volumes"
    v1alpha1.VirtualMachineExportLinks:
      type: object
      properties:
        external:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineExportLink'
        internal:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineExportLink'
      description: VirtualMachineExportLinks contains the links that point the exported
        VM resources
    v1alpha1.VirtualMachineExportList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineExport'
          x-kubernetes-list-type: atomic
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineExportList is a list of VirtualMachineExport resources
    v1alpha1.VirtualMachineExportManifest:
      required:
      - type
      - url
      type: object
      properties:
        type:
          type: string
          description: Type is the type of manifest returned
          default: ""
        url:
          type: string
          description: Url is the url of the endpoint that returns the manifest
          default: ""
      description: VirtualMachineExportManifest contains the type and URL of the exported
        manifest
    v1alpha1.VirtualMachineExportSpec:
      required:
      - source
      type: object
      properties:
        source:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
        tokenSecretRef:
          type: string
          description: TokenSecretRef is the name of the custom-defined secret that
            contains the token used by the export server pod
        ttlDuration:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
      description: VirtualMachineExportSpec is the spec for a VirtualMachineExport
        resource
    v1alpha1.VirtualMachineExportStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.Condition'
          x-kubernetes-list-type: atomic
        links:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineExportLinks'
        phase:
          type: string
        serviceName:
          type: string
          description: ServiceName is the name of the service created associated with
            the Virtual Machine export. It will be used to create the internal URLs
            for downloading the images
        tokenSecretRef:
          type: string
          description: TokenSecretRef is the name of the secret that contains the
            token used by the export server pod
        ttlExpirationTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        virtualMachineName:
          type: string
          description: VirtualMachineName shows the name of the source virtual machine
            if the source is either a VirtualMachine or a VirtualMachineSnapshot.
            This is mainly to easily identify the source VirtualMachine in case of
            a VirtualMachineSnapshot
      description: VirtualMachineExportStatus is the status for a VirtualMachineExport
        resource
    v1alpha1.VirtualMachineExportVolume:
      required:
      - name
      type: object
      properties:
        formats:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineExportVolumeFormat'
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - format
        name:
          type: string
          description: Name is the name of the exported volume
          default: ""
      description: VirtualMachineExportVolume contains the name and available formats
        for the exported volume
    v1alpha1.VirtualMachineExportVolumeFormat:
      required:
      - format
      - url
      type: object
      properties:
        format:
          type: string
          description: Format is the format of the image at the specified URL
          default: ""
        url:
          type: string
          description: Url is the url that contains the volume in the format specified
          default: ""
      description: VirtualMachineExportVolumeFormat contains the format type and URL
        to get the volume in that format
    v1alpha1.VirtualMachinePool:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.VirtualMachinePoolSpec'
        status:
          $ref: '#/components/schemas/v1alpha1.VirtualMachinePoolStatus'
      description: VirtualMachinePool resource contains a VirtualMachine configuration
        that can be used to replicate multiple VirtualMachine resources.
    v1alpha1.VirtualMachinePoolCondition:
      required:
      - status
      - type
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        status:
          type: string
          default: ""
        type:
          type: string
          default: ""
    v1alpha1.VirtualMachinePoolList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachinePool'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachinePoolList is a list of VirtualMachinePool resources.
    v1alpha1.VirtualMachinePoolSpec:
      required:
      - selector
      - virtualMachineTemplate
      type: object
      properties:
        paused:
          type: boolean
          description: Indicates that the pool is paused.
        replicas:
          type: integer
          description: Number of desired pods. This is a pointer to distinguish between
            explicit zero and not specified. Defaults to 1.
          format: int32
        selector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        virtualMachineTemplate:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineTemplateSpec'
    v1alpha1.VirtualMachinePoolStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachinePoolCondition'
          x-kubernetes-list-type: atomic
        labelSelector:
          type: string
          description: Canonical form of the label selector for HPA which consumes
            it through the scale subresource.
        readyReplicas:
          type: integer
          format: int32
        replicas:
          type: integer
          format: int32
    v1alpha1.VirtualMachineRestore:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineRestoreSpec'
        status:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineRestoreStatus'
      description: VirtualMachineRestore defines the operation of restoring a VM
    v1alpha1.VirtualMachineRestoreList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineRestore'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineRestoreList is a list of VirtualMachineRestore resources
    v1alpha1.VirtualMachineRestoreSpec:
      required:
      - target
      - virtualMachineSnapshotName
      type: object
      properties:
        patches:
          type: array
          description: |-
            If the target for the restore does not exist, it will be created. Patches holds JSON patches that would be applied to the target manifest before it's created. Patches should fit the target's Kind.

            Example for a patch: {"op": "replace", "path": "/metadata/name", "value": "new-vm-name"}
          items:
            type: string
            default: ""
          x-kubernetes-list-type: atomic
        target:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
        virtualMachineSnapshotName:
          type: string
          default: ""
      description: VirtualMachineRestoreSpec is the spec for a VirtualMachineRestoreresource
    v1alpha1.VirtualMachineRestoreStatus:
      type: object
      properties:
        complete:
          type: boolean
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.Condition'
        deletedDataVolumes:
          type: array
          items:
            type: string
            default: ""
        restoreTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        restores:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VolumeRestore'
      description: VirtualMachineRestoreStatus is the spec for a VirtualMachineRestoreresource
    v1alpha1.VirtualMachineSnapshot:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineSnapshotSpec'
        status:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineSnapshotStatus'
      description: VirtualMachineSnapshot defines the operation of snapshotting a
        VM
    v1alpha1.VirtualMachineSnapshotContent:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineSnapshotContentSpec'
        status:
          $ref: '#/components/schemas/v1alpha1.VirtualMachineSnapshotContentStatus'
      description: VirtualMachineSnapshotContent contains the snapshot data
    v1alpha1.VirtualMachineSnapshotContentList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineSnapshotContent'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineSnapshotContentList is a list of VirtualMachineSnapshot
        resources
    v1alpha1.VirtualMachineSnapshotContentSpec:
      required:
      - source
      type: object
      properties:
        source:
          $ref: '#/components/schemas/v1alpha1.SourceSpec'
        virtualMachineSnapshotName:
          type: string
        volumeBackups:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VolumeBackup'
      description: VirtualMachineSnapshotContentSpec is the spec for a VirtualMachineSnapshotContent
        resource
    v1alpha1.VirtualMachineSnapshotContentStatus:
      type: object
      properties:
        creationTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        error:
          $ref: '#/components/schemas/v1alpha1.Error'
        readyToUse:
          type: boolean
        volumeSnapshotStatus:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VolumeSnapshotStatus'
      description: VirtualMachineSnapshotContentStatus is the status for a VirtualMachineSnapshotStatus
        resource
    v1alpha1.VirtualMachineSnapshotList:
      required:
      - items
      - metadata
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.VirtualMachineSnapshot'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineSnapshotList is a list of VirtualMachineSnapshot
        resources
    v1alpha1.VirtualMachineSnapshotSpec:
      required:
      - source
      type: object
      properties:
        deletionPolicy:
          type: string
        failureDeadline:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
        source:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
      description: VirtualMachineSnapshotSpec is the spec for a VirtualMachineSnapshot
        resource
    v1alpha1.VirtualMachineSnapshotStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/v1alpha1.Condition'
        creationTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        error:
          $ref: '#/components/schemas/v1alpha1.Error'
        indications:
          type: array
          items:
            type: string
            default: ""
          x-kubernetes-list-type: set
        phase:
          type: string
        readyToUse:
          type: boolean
        snapshotVolumes:
          $ref: '#/components/schemas/v1alpha1.SnapshotVolumesLists'
        sourceUID:
          type: string
        virtualMachineSnapshotContentName:
          type: string
      description: VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot
        resource
    v1alpha1.VirtualMachineTemplateSpec:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1.VirtualMachineSpec'
    v1alpha1.VolumeBackup:
      required:
      - persistentVolumeClaim
      - volumeName
      type: object
      properties:
        persistentVolumeClaim:
          $ref: '#/components/schemas/v1alpha1.PersistentVolumeClaim'
        volumeName:
          type: string
          default: ""
        volumeSnapshotName:
          type: string
      description: VolumeBackup contains the data neeed to restore a PVC
    v1alpha1.VolumeRestore:
      required:
      - persistentVolumeClaim
      - volumeName
      - volumeSnapshotName
      type: object
      properties:
        dataVolumeName:
          type: string
        persistentVolumeClaim:
          type: string
          default: ""
        volumeName:
          type: string
          default: ""
        volumeSnapshotName:
          type: string
          default: ""
      description: VolumeRestore contains the data neeed to restore a PVC
    v1alpha1.VolumeSnapshotStatus:
      required:
      - volumeSnapshotName
      type: object
      properties:
        creationTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
        error:
          $ref: '#/components/schemas/v1alpha1.Error'
        readyToUse:
          type: boolean
        volumeSnapshotName:
          type: string
          default: ""
      description: VolumeSnapshotStatus is the status of a VolumeSnapshot
    v1beta1.CPUInstancetype:
      required:
      - guest
      type: object
      properties:
        dedicatedCPUPlacement:
          type: boolean
          description: DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance
            on a node with enough dedicated pCPUs and pin the vCPUs to it.
        guest:
          type: integer
          description: |-
            Required number of vCPUs to expose to the guest.

            The resulting CPU topology being derived from the optional PreferredCPUTopology attribute of CPUPreferences that itself defaults to PreferSockets.
          format: int64
          default: 0
        isolateEmulatorThread:
          type: boolean
          description: IsolateEmulatorThread requests one more dedicated pCPU to be
            allocated for the VMI to place the emulator thread on it.
        model:
          type: string
          description: Model specifies the CPU model inside the VMI. List of available
            models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It
            is possible to specify special cases like "host-passthrough" to get the
            same CPU as the node and "host-model" to get CPU closest to the node one.
            Defaults to host-model.
        numa:
          $ref: '#/components/schemas/v1.NUMA'
        realtime:
          $ref: '#/components/schemas/v1.Realtime'
      description: |-
        CPUInstancetype contains the CPU related configuration of a given VirtualMachineInstancetypeSpec.

        Guest is a required attribute and defines the number of vCPUs to be exposed to the guest by the instancetype.
    v1beta1.CPUPreferenceRequirement:
      required:
      - guest
      type: object
      properties:
        guest:
          type: integer
          description: Minimal number of vCPUs required by the preference.
          format: int64
          default: 0
    v1beta1.CPUPreferences:
      type: object
      properties:
        preferredCPUFeatures:
          type: array
          description: PreferredCPUFeatures optionally defines a slice of preferred
            CPU features.
          items:
            $ref: '#/components/schemas/v1.CPUFeature'
        preferredCPUTopology:
          type: string
          description: "PreferredCPUTopology optionally defines the preferred guest\
            \ visible CPU topology, defaults to PreferSockets."
        spreadOptions:
          $ref: '#/components/schemas/v1beta1.SpreadOptions'
      description: CPUPreferences contains various optional CPU preferences.
    v1beta1.ClockPreferences:
      type: object
      properties:
        preferredClockOffset:
          $ref: '#/components/schemas/v1.ClockOffset'
        preferredTimer:
          $ref: '#/components/schemas/v1.Timer'
      description: ClockPreferences contains various optional defaults for Clock.
    v1beta1.DataVolumeBlankImage:
      type: object
      description: DataVolumeBlankImage provides the parameters to create a new raw
        blank image for the PVC
    v1beta1.DataVolumeCheckpoint:
      required:
      - current
      - previous
      type: object
      properties:
        current:
          type: string
          description: Current is the identifier of the snapshot created for this
            checkpoint.
          default: ""
        previous:
          type: string
          description: Previous is the identifier of the snapshot from the previous
            checkpoint.
          default: ""
      description: DataVolumeCheckpoint defines a stage in a warm migration.
    v1beta1.DataVolumeSource:
      type: object
      properties:
        blank:
          $ref: '#/components/schemas/v1beta1.DataVolumeBlankImage'
        gcs:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceGCS'
        http:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceHTTP'
        imageio:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceImageIO'
        pvc:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourcePVC'
        registry:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceRegistry'
        s3:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceS3'
        snapshot:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceSnapshot'
        upload:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceUpload'
        vddk:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceVDDK'
      description: "DataVolumeSource represents the source for our Data Volume, this\
        \ can be HTTP, Imageio, S3, GCS, Registry or an existing PVC"
    v1beta1.DataVolumeSourceGCS:
      required:
      - url
      type: object
      properties:
        secretRef:
          type: string
          description: SecretRef provides the secret reference needed to access the
            GCS source
        url:
          type: string
          description: URL is the url of the GCS source
          default: ""
      description: DataVolumeSourceGCS provides the parameters to create a Data Volume
        from an GCS source
    v1beta1.DataVolumeSourceHTTP:
      required:
      - url
      type: object
      properties:
        certConfigMap:
          type: string
          description: "CertConfigMap is a configmap reference, containing a Certificate\
            \ Authority(CA) public key, and a base64 encoded pem certificate"
        extraHeaders:
          type: array
          description: ExtraHeaders is a list of strings containing extra headers
            to include with HTTP transfer requests
          items:
            type: string
            default: ""
        secretExtraHeaders:
          type: array
          description: "SecretExtraHeaders is a list of Secret references, each containing\
            \ an extra HTTP header that may include sensitive information"
          items:
            type: string
            default: ""
        secretRef:
          type: string
          description: "SecretRef A Secret reference, the secret should contain accessKeyId\
            \ (user name) base64 encoded, and secretKey (password) also base64 encoded"
        url:
          type: string
          description: URL is the URL of the http(s) endpoint
          default: ""
      description: "DataVolumeSourceHTTP can be either an http or https endpoint,\
        \ with an optional basic auth user name and password, and an optional configmap\
        \ containing additional CAs"
    v1beta1.DataVolumeSourceImageIO:
      required:
      - diskId
      - url
      type: object
      properties:
        certConfigMap:
          type: string
          description: CertConfigMap provides a reference to the CA cert
        diskId:
          type: string
          description: DiskID provides id of a disk to be imported
          default: ""
        secretRef:
          type: string
          description: SecretRef provides the secret reference needed to access the
            ovirt-engine
        url:
          type: string
          description: URL is the URL of the ovirt-engine
          default: ""
      description: DataVolumeSourceImageIO provides the parameters to create a Data
        Volume from an imageio source
    v1beta1.DataVolumeSourcePVC:
      required:
      - name
      - namespace
      type: object
      properties:
        name:
          type: string
          description: The name of the source PVC
          default: ""
        namespace:
          type: string
          description: The namespace of the source PVC
          default: ""
      description: DataVolumeSourcePVC provides the parameters to create a Data Volume
        from an existing PVC
    v1beta1.DataVolumeSourceRef:
      required:
      - kind
      - name
      type: object
      properties:
        kind:
          type: string
          description: "The kind of the source reference, currently only \"DataSource\"\
            \ is supported"
          default: ""
        name:
          type: string
          description: The name of the source reference
          default: ""
        namespace:
          type: string
          description: "The namespace of the source reference, defaults to the DataVolume\
            \ namespace"
      description: DataVolumeSourceRef defines an indirect reference to the source
        of data for the DataVolume
    v1beta1.DataVolumeSourceRegistry:
      type: object
      properties:
        certConfigMap:
          type: string
          description: CertConfigMap provides a reference to the Registry certs
        imageStream:
          type: string
          description: ImageStream is the name of image stream for import
        pullMethod:
          type: string
          description: "PullMethod can be either \"pod\" (default import), or \"node\"\
            \ (node docker cache based import)"
        secretRef:
          type: string
          description: SecretRef provides the secret reference needed to access the
            Registry source
        url:
          type: string
          description: "URL is the url of the registry source (starting with the scheme:\
            \ docker, oci-archive)"
      description: DataVolumeSourceRegistry provides the parameters to create a Data
        Volume from an registry source
    v1beta1.DataVolumeSourceS3:
      required:
      - url
      type: object
      properties:
        certConfigMap:
          type: string
          description: "CertConfigMap is a configmap reference, containing a Certificate\
            \ Authority(CA) public key, and a base64 encoded pem certificate"
        secretRef:
          type: string
          description: SecretRef provides the secret reference needed to access the
            S3 source
        url:
          type: string
          description: URL is the url of the S3 source
          default: ""
      description: DataVolumeSourceS3 provides the parameters to create a Data Volume
        from an S3 source
    v1beta1.DataVolumeSourceSnapshot:
      required:
      - name
      - namespace
      type: object
      properties:
        name:
          type: string
          description: The name of the source VolumeSnapshot
          default: ""
        namespace:
          type: string
          description: The namespace of the source VolumeSnapshot
          default: ""
      description: DataVolumeSourceSnapshot provides the parameters to create a Data
        Volume from an existing VolumeSnapshot
    v1beta1.DataVolumeSourceUpload:
      type: object
      description: DataVolumeSourceUpload provides the parameters to create a Data
        Volume by uploading the source
    v1beta1.DataVolumeSourceVDDK:
      type: object
      properties:
        backingFile:
          type: string
          description: BackingFile is the path to the virtual hard disk to migrate
            from vCenter/ESXi
        initImageURL:
          type: string
          description: "InitImageURL is an optional URL to an image containing an\
            \ extracted VDDK library, overrides v2v-vmware config map"
        secretRef:
          type: string
          description: SecretRef provides a reference to a secret containing the username
            and password needed to access the vCenter or ESXi host
        thumbprint:
          type: string
          description: Thumbprint is the certificate thumbprint of the vCenter or
            ESXi host
        url:
          type: string
          description: URL is the URL of the vCenter or ESXi host with the VM to migrate
        uuid:
          type: string
          description: UUID is the UUID of the virtual machine that the backing file
            is attached to in vCenter/ESXi
      description: DataVolumeSourceVDDK provides the parameters to create a Data Volume
        from a Vmware source
    v1beta1.DataVolumeSpec:
      type: object
      properties:
        checkpoints:
          type: array
          description: "Checkpoints is a list of DataVolumeCheckpoints, representing\
            \ stages in a multistage import."
          items:
            $ref: '#/components/schemas/v1beta1.DataVolumeCheckpoint'
        contentType:
          type: string
          description: "DataVolumeContentType options: \"kubevirt\", \"archive\""
        finalCheckpoint:
          type: boolean
          description: FinalCheckpoint indicates whether the current DataVolumeCheckpoint
            is the final checkpoint.
        preallocation:
          type: boolean
          description: Preallocation controls whether storage for DataVolumes should
            be allocated in advance.
        priorityClassName:
          type: string
          description: "PriorityClassName for Importer, Cloner and Uploader pod"
        pvc:
          $ref: '#/components/schemas/k8s.io.api.core.v1.PersistentVolumeClaimSpec'
        source:
          $ref: '#/components/schemas/v1beta1.DataVolumeSource'
        sourceRef:
          $ref: '#/components/schemas/v1beta1.DataVolumeSourceRef'
        storage:
          $ref: '#/components/schemas/v1beta1.StorageSpec'
      description: DataVolumeSpec defines the DataVolume type specification
    v1beta1.DevicePreferences:
      type: object
      properties:
        preferredAutoattachGraphicsDevice:
          type: boolean
          description: PreferredAutoattachGraphicsDevice optionally defines the preferred
            value of AutoattachGraphicsDevice
        preferredAutoattachInputDevice:
          type: boolean
          description: PreferredAutoattachInputDevice optionally defines the preferred
            value of AutoattachInputDevice
        preferredAutoattachMemBalloon:
          type: boolean
          description: PreferredAutoattachMemBalloon optionally defines the preferred
            value of AutoattachMemBalloon
        preferredAutoattachPodInterface:
          type: boolean
          description: PreferredAutoattachPodInterface optionally defines the preferred
            value of AutoattachPodInterface
        preferredAutoattachSerialConsole:
          type: boolean
          description: PreferredAutoattachSerialConsole optionally defines the preferred
            value of AutoattachSerialConsole
        preferredBlockMultiQueue:
          type: boolean
          description: PreferredBlockMultiQueue optionally enables the vhost multiqueue
            feature for virtio disks.
        preferredCdromBus:
          type: string
          description: PreferredCdromBus optionally defines the preferred bus for
            Cdrom Disk devices.
        preferredDisableHotplug:
          type: boolean
          description: PreferredDisableHotplug optionally defines the preferred value
            of DisableHotplug
        preferredDiskBlockSize:
          $ref: '#/components/schemas/v1.BlockSize'
        preferredDiskBus:
          type: string
          description: PreferredDiskBus optionally defines the preferred bus for Disk
            Disk devices.
        preferredDiskCache:
          type: string
          description: PreferredCache optionally defines the DriverCache to be used
            by Disk devices.
        preferredDiskDedicatedIoThread:
          type: boolean
          description: PreferredDedicatedIoThread optionally enables dedicated IO
            threads for Disk devices.
        preferredDiskIO:
          type: string
          description: PreferredIo optionally defines the QEMU disk IO mode to be
            used by Disk devices.
        preferredInputBus:
          type: string
          description: PreferredInputBus optionally defines the preferred bus for
            Input devices.
        preferredInputType:
          type: string
          description: PreferredInputType optionally defines the preferred type for
            Input devices.
        preferredInterfaceMasquerade:
          $ref: '#/components/schemas/v1.InterfaceMasquerade'
        preferredInterfaceModel:
          type: string
          description: PreferredInterfaceModel optionally defines the preferred model
            to be used by Interface devices.
        preferredLunBus:
          type: string
          description: PreferredLunBus optionally defines the preferred bus for Lun
            Disk devices.
        preferredNetworkInterfaceMultiQueue:
          type: boolean
          description: PreferredNetworkInterfaceMultiQueue optionally enables the
            vhost multiqueue feature for virtio interfaces.
        preferredRng:
          $ref: '#/components/schemas/v1.Rng'
        preferredSoundModel:
          type: string
          description: PreferredSoundModel optionally defines the preferred model
            for Sound devices.
        preferredTPM:
          $ref: '#/components/schemas/v1.TPMDevice'
        preferredUseVirtioTransitional:
          type: boolean
          description: PreferredUseVirtioTransitional optionally defines the preferred
            value of UseVirtioTransitional
        preferredVirtualGPUOptions:
          $ref: '#/components/schemas/v1.VGPUOptions'
      description: DevicePreferences contains various optional Device preferences.
    v1beta1.FeaturePreferences:
      type: object
      properties:
        preferredAcpi:
          $ref: '#/components/schemas/v1.FeatureState'
        preferredApic:
          $ref: '#/components/schemas/v1.FeatureAPIC'
        preferredHyperv:
          $ref: '#/components/schemas/v1.FeatureHyperv'
        preferredKvm:
          $ref: '#/components/schemas/v1.FeatureKVM'
        preferredPvspinlock:
          $ref: '#/components/schemas/v1.FeatureState'
        preferredSmm:
          $ref: '#/components/schemas/v1.FeatureState'
      description: FeaturePreferences contains various optional defaults for Features.
    v1beta1.FirmwarePreferences:
      type: object
      properties:
        preferredUseBios:
          type: boolean
          description: PreferredUseBios optionally enables BIOS
        preferredUseBiosSerial:
          type: boolean
          description: |-
            PreferredUseBiosSerial optionally transmitts BIOS output over the serial.

            Requires PreferredUseBios to be enabled.
        preferredUseEfi:
          type: boolean
          description: PreferredUseEfi optionally enables EFI
        preferredUseSecureBoot:
          type: boolean
          description: |-
            PreferredUseSecureBoot optionally enables SecureBoot and the OVMF roms will be swapped for SecureBoot-enabled ones.

            Requires PreferredUseEfi and PreferredSmm to be enabled.
      description: FirmwarePreferences contains various optional defaults for Firmware.
    v1beta1.MachinePreferences:
      type: object
      properties:
        preferredMachineType:
          type: string
          description: PreferredMachineType optionally defines the preferred machine
            type to use.
      description: MachinePreferences contains various optional defaults for Machine.
    v1beta1.MemoryInstancetype:
      required:
      - guest
      type: object
      properties:
        guest:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
        hugepages:
          $ref: '#/components/schemas/v1.Hugepages'
        overcommitPercent:
          type: integer
          description: "OvercommitPercent is the percentage of the guest memory which\
            \ will be overcommitted. This means that the VMIs parent pod (virt-launcher)\
            \ will request less physical memory by a factor specified by the OvercommitPercent.\
            \ Overcommits can lead to memory exhaustion, which in turn can lead to\
            \ crashes. Use carefully. Defaults to 0"
          format: int32
      description: |-
        MemoryInstancetype contains the Memory related configuration of a given VirtualMachineInstancetypeSpec.

        Guest is a required attribute and defines the amount of RAM to be exposed to the guest by the instancetype.
    v1beta1.MemoryPreferenceRequirement:
      required:
      - guest
      type: object
      properties:
        guest:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.api.resource.Quantity'
    v1beta1.PreferenceRequirements:
      type: object
      properties:
        cpu:
          $ref: '#/components/schemas/v1beta1.CPUPreferenceRequirement'
        memory:
          $ref: '#/components/schemas/v1beta1.MemoryPreferenceRequirement'
    v1beta1.SpreadOptions:
      type: object
      properties:
        across:
          type: string
          description: "Across optionally defines how to spread vCPUs across the guest\
            \ visible topology. Default: SocketsCores"
        ratio:
          type: integer
          description: |-
            Ratio optionally defines the ratio to spread vCPUs across the guest visible topology:

            CoresThreads        - 1:2   - Controls the ratio of cores to threads. Only a ratio of 2 is currently accepted. SocketsCores        - 1:N   - Controls the ratio of socket to cores. SocketsCoresThreads - 1:N:2 - Controls the ratio of socket to cores. Each core providing 2 threads.

            Default: 2
          format: int64
    v1beta1.StorageSpec:
      type: object
      properties:
        accessModes:
          type: array
          description: "AccessModes contains the desired access modes the volume should\
            \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
          items:
            type: string
            default: ""
        dataSource:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedLocalObjectReference'
        dataSourceRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.TypedObjectReference'
        resources:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ResourceRequirements'
        selector:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector'
        storageClassName:
          type: string
          description: "Name of the StorageClass required by the claim. More info:\
            \ https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        volumeMode:
          type: string
          description: |-
            volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.

            Possible enum values:
             - `"Block"` means the volume will not be formatted with a filesystem and will remain a raw block device.
             - `"Filesystem"` means the volume will be or is formatted with a filesystem.
          enum:
          - Block
          - Filesystem
        volumeName:
          type: string
          description: VolumeName is the binding reference to the PersistentVolume
            backing this claim.
      description: StorageSpec defines the Storage type specification
    v1beta1.VirtualMachineClusterInstancetype:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1beta1.VirtualMachineInstancetypeSpec'
      description: VirtualMachineClusterInstancetype is a cluster scoped version of
        VirtualMachineInstancetype resource.
    v1beta1.VirtualMachineClusterInstancetypeList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1beta1.VirtualMachineClusterInstancetype'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineClusterInstancetypeList is a list of VirtualMachineClusterInstancetype
        resources.
    v1beta1.VirtualMachineClusterPreference:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1beta1.VirtualMachinePreferenceSpec'
      description: VirtualMachineClusterPreference is a cluster scoped version of
        the VirtualMachinePreference resource.
    v1beta1.VirtualMachineClusterPreferenceList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1beta1.VirtualMachineClusterPreference'
          x-kubernetes-list-type: set
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineClusterPreferenceList is a list of VirtualMachineClusterPreference
        resources.
    v1beta1.VirtualMachineInstancetype:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1beta1.VirtualMachineInstancetypeSpec'
      description: VirtualMachineInstancetype resource contains quantitative and resource
        related VirtualMachine configuration that can be used by multiple VirtualMachine
        resources.
    v1beta1.VirtualMachineInstancetypeList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1beta1.VirtualMachineInstancetype'
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachineInstancetypeList is a list of VirtualMachineInstancetype
        resources.
    v1beta1.VirtualMachineInstancetypeSpec:
      required:
      - cpu
      - memory
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: Optionally defines the required Annotations to be used by the
            instance type and applied to the VirtualMachineInstance
        cpu:
          $ref: '#/components/schemas/v1beta1.CPUInstancetype'
        gpus:
          type: array
          description: Optionally defines any GPU devices associated with the instancetype.
          items:
            $ref: '#/components/schemas/v1.GPU'
          x-kubernetes-list-type: atomic
        hostDevices:
          type: array
          description: Optionally defines any HostDevices associated with the instancetype.
          items:
            $ref: '#/components/schemas/v1.HostDevice'
          x-kubernetes-list-type: atomic
        ioThreadsPolicy:
          type: string
          description: Optionally defines the IOThreadsPolicy to be used by the instancetype.
        launchSecurity:
          $ref: '#/components/schemas/v1.LaunchSecurity'
        memory:
          $ref: '#/components/schemas/v1beta1.MemoryInstancetype'
        nodeSelector:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: |-
            NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

            NodeSelector is the name of the custom node selector for the instancetype.
        schedulerName:
          type: string
          description: |-
            If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler.

            SchedulerName is the name of the custom K8s scheduler for the instancetype.
      description: |-
        VirtualMachineInstancetypeSpec is a description of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype.

        CPU and Memory are required attributes with both requiring that their Guest attribute is defined, ensuring a number of vCPUs and amount of RAM is always provided by each instancetype.
    v1beta1.VirtualMachinePreference:
      required:
      - spec
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/v1beta1.VirtualMachinePreferenceSpec'
      description: VirtualMachinePreference resource contains optional preferences
        related to the VirtualMachine.
    v1beta1.VirtualMachinePreferenceList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: "APIVersion defines the versioned schema of this representation\
            \ of an object. Servers should convert recognized schemas to the latest\
            \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1beta1.VirtualMachinePreference'
          x-kubernetes-list-type: set
        kind:
          type: string
          description: "Kind is a string value representing the REST resource this\
            \ object represents. Servers may infer this from the endpoint the client\
            \ submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta'
      description: VirtualMachinePreferenceList is a list of VirtualMachinePreference
        resources.
    v1beta1.VirtualMachinePreferenceSpec:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
            default: ""
          description: Optionally defines preferred Annotations to be applied to the
            VirtualMachineInstance
        clock:
          $ref: '#/components/schemas/v1beta1.ClockPreferences'
        cpu:
          $ref: '#/components/schemas/v1beta1.CPUPreferences'
        devices:
          $ref: '#/components/schemas/v1beta1.DevicePreferences'
        features:
          $ref: '#/components/schemas/v1beta1.FeaturePreferences'
        firmware:
          $ref: '#/components/schemas/v1beta1.FirmwarePreferences'
        machine:
          $ref: '#/components/schemas/v1beta1.MachinePreferences'
        preferSpreadSocketToCoreRatio:
          type: integer
          description: "PreferSpreadSocketToCoreRatio defines the ratio to spread\
            \ vCPUs between cores and sockets, it defaults to 2."
          format: int64
        preferredSubdomain:
          type: string
          description: Subdomain of the VirtualMachineInstance
        preferredTerminationGracePeriodSeconds:
          type: integer
          description: Grace period observed after signalling a VirtualMachineInstance
            to stop after which the VirtualMachineInstance is force terminated.
          format: int64
        requirements:
          $ref: '#/components/schemas/v1beta1.PreferenceRequirements'
        volumes:
          $ref: '#/components/schemas/v1beta1.VolumePreferences'
      description: VirtualMachinePreferenceSpec is a description of the VirtualMachinePreference
        or VirtualMachineClusterPreference.
    v1beta1.VolumePreferences:
      type: object
      properties:
        preferredStorageClassName:
          type: string
          description: PreffereedStorageClassName optionally defines the preferred
            storageClass
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      description: Bearer Token authentication
x-original-swagger-version: "2.0"
