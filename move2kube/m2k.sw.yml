specVersion: "0.8"
id: m2k
version: "1.0"
name: Move2Kube workflow
description: Workflow to execute Move2Kube
annotations:
  - "workflow-type/infrastructure"
dataInputSchema: schemas/input.json
start: StartPlanning
extensions:
  - extensionid: workflow-output-schema
    outputSchema: schemas/workflow-output-schema.json
  - extensionid: workflow-uri-definitions
    definitions:
      notifications: "https://raw.githubusercontent.com/parodos-dev/serverless-workflows/main/shared/specs/notifications-openapi.yaml"
events:
  - name: errorEvent
    source: ""
    type: error
  - name: transformationSavedEvent
    source: ""
    type: transformation_saved
  - name: saveTransformationEvent
    source: ""
    type: save-transformation
    kind: produced
functions:
  - name: systemOut
    type: custom
    operation: sysout
  - name: startPlanning
    type: rest
    operation: specs/move2kube.yaml#start-planning
  - name: getPlanning
    type: rest
    operation: specs/move2kube.yaml#get-plan
  - name: startTransformation
    type: rest
    operation: specs/move2kube.yaml#start-transformation
  - name: createNotification
    operation: notifications#createNotification
  - name: increasePlanRetries
    type: expression
    operation: ".planRetries=.planRetries + 1"
  - name: formatTransformationErrorExitMessage
    type: expression
    operation: '{
      exitMessage: "Error while saving transformation output: " + (if .error == null then "timeout exception was thrown." else .error end)
      }'
  - name: successResult
    type: expression
    operation: '{
        "result": {
          "completedWith":"success",
          "message": "Move2Kube workflow  " + $WORKFLOW.instanceId + " on workspace " + .workspaceId + " and project " + .projectId + " was successful; the output is available in the branch " + .targetBranch + " of your git repository "+ .repositoryURL,
          "outputs": [
            {
                "key":"Git repository",
                "value": .repositoryURL,
                "format":"link"
            },
            {
                "key":"Git branch",
                "value": .targetBranch
            }
          ]
        }
      }'
  - name: errorResult
    type: expression
    operation: '{
        "result": {
          "completedWith":"error",
          "message": "Move2Kube workflow  " + $WORKFLOW.instanceId + " on workspace " + .workspaceId + " and project " + .projectId + " failed ",
          "outputs":[
            {
                "key":"Exit message",
                "value": .exitMessage
            },
            {
                "key":"Plan retries",
                "value": (.planRetries|tostring),
                "format":"number"
            }
          ]
        }
      }'
states:
  - name: StartPlanning
    type: operation
    actions:
      - functionRef:
          refName: startPlanning
          arguments:
            workspace-id: ".workspaceId"
            project-id: ".projectId"
            remote-source: '"git+" + (.repositoryURL|sub("http(s)://?";"ssh://")) + "@" + .sourceBranch'
    transition: InitGetPlanningRetry
  - name: InitGetPlanningRetry
    type: inject
    data:
      planRetries: 0
    transition: GetPlanning
  - name: GetPlanning
    type: operation
    actions:
      - functionRef:
          refName: getPlanning
          arguments:
            workspace-id: ".workspaceId"
            project-id: ".projectId"
        actionDataFilter:
          toStateData: .
        sleep:
          before: PT2S
    transition: IncreaseGetPlanningRetry
  - name: IncreaseGetPlanningRetry
    type: operation
    actions:
      - functionRef:
          refName: increasePlanRetries
    transition: PlanRetrievedCheck
  - name: PlanRetrievedCheck
    type: switch
    dataConditions:
      - condition: (has("plan") and .plan != "")
        transition:
          nextState: StartTransformation
      - condition: (.planRetries >  ($SECRET.move2kube_get_plan_max_retries | tonumber))
        transition:
          nextState: GetPlanRetryExceededError
    defaultCondition:
      transition: GetPlanning
  - name: StartTransformation
    type: operation
    actions:
      - functionRef:
          refName: startTransformation
          arguments:
            workspace-id: ".workspaceId"
            project-id: ".projectId"
            plan: .plan
        actionDataFilter:
          results: .id
          toStateData: .transformId
    transition: PrintTransformationIdMessage
  - name: PrintTransformationIdMessage
    type: operation
    actions:
      - name: printSystemOut
        functionRef:
          refName: systemOut
          arguments:
            message: '${"m2k workflow: " + $WORKFLOW.instanceId + " transformation ID: " + .transformId }'
    transition: NotifyTransformationWaiting
  - name: NotifyTransformationWaiting
    type: operation
    actions:
      - name: createNotification
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: ' "Transformation " + .transformationId + " waiting for Q&A" '
              description: '"Please go to your move2kube instance and answer the questions in order to continue the Move2Kube workflow"'
              topic: "Move2Kube Workflow"
              link: '$SECRET.move2kube_url + "/workspaces/"+ .workspaceId + "/projects/" + .projectId + "/outputs/"+ .transformId '
              severity: "normal"
    transition:
      nextState: WaitForSaveTransformationCompletionEvent
      produceEvents:
        - eventRef: saveTransformationEvent
          data: '{gitRepo:.repositoryURL|sub("http(s)?://";"ssh://"), branch: .targetBranch, workspaceId: .workspaceId, projectId: .projectId, transformId: .transformId, workflowCallerId: $WORKFLOW.instanceId}'
  - name: WaitForSaveTransformationCompletionEvent
    type: switch
    eventConditions:
      - eventRef: errorEvent
        transition: TransformationError
      - eventRef: transformationSavedEvent
        transition: TransformationSaved
    defaultCondition:
      transition: TransformationError
    timeouts:
      eventTimeout: P90D
  - name: TransformationSaved
    type: inject
    data:
      exitMessage: Transformation successful.
    transition: PrintExitSuccessMessage
  - name: TransformationError
    type: operation
    actions:
      - functionRef:
      # we have to use an expression function to be able to have conditional eror. Switch may work as well
          refName: formatTransformationErrorExitMessage
    transition: PrintExitErrorMessage
  - name: GetPlanRetryExceededError
    type: inject
    data:
      exitMessage: '"Get plan retries exceeded, an error probably occurred, check the move2kube instance logs"'
    transition: PrintExitErrorMessage
  - name: PrintExitErrorMessage
    type: parallel
    metadata:
      errorMessage: '"Move2kube (m2k) workflow: " + $WORKFLOW.instanceId + " has finalized with error. Exit message: " + .exitMessage + " -- Plan retries: " + (.planRetries|tostring)'
    branches:
      - name: printSystemOut
        actions:
          - name: printSystemOut
            functionRef:
              refName: systemOut
              arguments:
                message: '"m2k workflow: " + $WORKFLOW.instanceId + " has finalized with error. Exit message: " + .exitMessage + " -- Plan retries: " + (.planRetries|tostring)'
      - name: createNotification
        actions:
          - name: createNotification
            functionRef:
              refName: createNotification
              arguments:
                recipients:
                  type: "entity"
                  entityRef: .recipients
                payload:
                  title: '"Move2Kube workflow " + $WORKFLOW.instanceId + " failed"'
                  description: '"Move2Kube workflow  " + $WORKFLOW.instanceId + " on workspace " + .workspaceId + " and project " + .projectId + " failed with exit message: "+ .exitMessage + " -- Plan retries: "  + (.planRetries|tostring)'
                  topic: "Move2Kube Workflow"
                  severity: "critical"
      - name: setOutput
        actions:
        - name: setOutput
          functionRef:
            refName: errorResult
    end: true
  - name: PrintExitSuccessMessage
    type: parallel
    branches:
      - name: printSystemOut
        actions:
          - name: printSystemOut
            functionRef:
              refName: systemOut
              arguments:
                message: '${"m2k workflow: " + $WORKFLOW.instanceId + " has finalized successfully}"'
      - name: createNotification
        actions:
          - name: createNotification
            functionRef:
              refName: createNotification
              arguments:
                recipients:
                  type: "entity"
                  entityRef: .recipients
                payload:
                  title: '"Move2Kube workflow " + $WORKFLOW.instanceId + " succeeded"'
                  description: '"Move2Kube workflow  " + $WORKFLOW.instanceId + " on workspace " + .workspaceId + " and project " + .projectId + " was successful; the output is available in the branch " + .targetBranch + " of your git repository "+ .repositoryURL'
                  topic: "Move2Kube Workflow"
                  severity: "normal"
      - name: setOutput
        actions:
        - name: setOutput
          functionRef:
            refName: successResult
    end: true
