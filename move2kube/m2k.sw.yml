specVersion: "0.8"
id: m2k
version: '1.0'
name: Move2Kube workflow
description: Workflow to execute Move2Kube
dataInputSchema: schemas/input.json
start: StartPlanning
secrets: ["GIT_TOKEN"]
extensions:
  - extensionid: workflow-uri-definitions
    definitions:
      notifications: "https://raw.githubusercontent.com/janus-idp/backstage-plugins/%40janus-idp/plugin-notifications-backend%401.0.3/plugins/notifications-backend/src/openapi.yaml"
events:
  - name: errorEvent
    source: ''
    type: error
  - name: transformationSavedEvent
    source: ''
    type: transformation_saved
  - name: saveTransformationEvent
    source: ''
    type: save-transformation
functions:
  - name: systemOut
    type: custom
    operation: sysout
  - name: startPlanning
    type: rest
    operation: specs/move2kube.yaml#start-planning
  - name: getPlanning
    type: rest
    operation: specs/move2kube.yaml#get-plan
  - name: startTransformation
    type: rest
    operation: specs/move2kube.yaml#start-transformation
  - name: createNotification
    operation: notifications#createNotification
states:
  - name: StartPlanning
    type: operation
    actions:
      - functionRef:
          refName: startPlanning
          arguments:
            workspace-id: ".workspaceId"
            project-id: ".projectId"
            remote-source: "\"git+\" + (.repositoryURL|sub(\"http(s)://?\";\"ssh://\")) + \"@\" + .sourceBranch"
    transition: GetPlanning
  - name: GetPlanning
    type: operation
    actions:
      - functionRef:
          refName: getPlanning
          arguments:
            workspace-id: ".workspaceId"
            project-id: ".projectId"
        actionDataFilter:
          toStateData: .
        sleep:
          before: PT2S
    transition: PlanRetrievedCheck
  - name: PlanRetrievedCheck
    type: switch
    dataConditions:
      - condition: (has("plan") and .plan != "")
        transition:
          nextState: StartTransformation
    defaultCondition:
      transition: GetPlanning
  - name: StartTransformation
    type: operation
    actions:
      - functionRef:
          refName: startTransformation
          arguments:
            workspace-id: ".workspaceId"
            project-id: ".projectId"
            plan: .plan
        actionDataFilter:
          results: .id
          toStateData: .transformId
    transition: PrintTransformationIdMessage
  - name: PrintTransformationIdMessage
    type: operation
    actions:
      - name: printSystemOut
        functionRef:
          refName: systemOut
          arguments:
            message: '${"m2k workflow: " + $WORKFLOW.instanceId + " transformation ID: " + .transformId }'
    transition: NotifyTransformationWaiting
  - name: NotifyTransformationWaiting
    type: operation
    actions:
      - name: create
        condition: ((has("notificationsDisabled") and .notificationsDisabled != null and .notificationsDisabled == true)|not)
        functionRef:
          refName: createNotification
          arguments:
            title: " \"Transformation \" + .transformationId + \" waiting for Q&A\" "
            message: '"Please go to your move2kube instance and answer the questions in order to continue the Move2Kube workflow"'
            origin: "Move2Kube Workflow"
            topic: "Move2Kube Workflow"
            actions:
              - title: "Move2Kube waiting Q&A"
                url: "$SECRET.move2kube_url + \"/workspaces/\"+ .workspaceId + \"/projects/\" + .projectId + \"/outputs/\"+ .transformId "
    transition:
      nextState: WaitForSaveTransformationCompletionEvent
      produceEvents:
        - eventRef: saveTransformationEvent
          data: "{gitRepo:.repositoryURL|sub(\"http(s)?://\";\"ssh://\"), branch: .targetBranch, workspaceId: .workspaceId, projectId: .projectId, transformId: .transformId, workflowCallerId: $WORKFLOW.instanceId}"
  - name: WaitForSaveTransformationCompletionEvent
    type: switch
    eventConditions:
      - eventRef: errorEvent
        transition: TransformationError
      - eventRef: transformationSavedEvent
        transition: TransformationSaved
    defaultCondition:
      transition: TransformationError
    timeouts:
      eventTimeout: P90D
  - name: TransformationSaved
    type: inject
    data:
      exitMessage: Transformation successful.
    transition: PrintExitSuccessMessage
  - name: TransformationError
    type: inject
    data:
      exitMessage: '"Error while saving transformation output. If no context, it was due to timeout expiration"'
    transition: PrintExitErrorMessage
  - name: PrintExitErrorMessage
    type: parallel
    branches:
    - name: printSystemOut
      actions:
        - name: printSystemOut
          functionRef:
            refName: systemOut
            arguments:
              message: '${"m2k workflow: " + $WORKFLOW.instanceId + " has finalized with error. Exit message: " + .exitMessage + " -- Context: "  + .error }'
    - name: createNotification
      actions:
        - name: createNotification
          condition: ((has("notificationsDisabled") and .notificationsDisabled != null and .notificationsDisabled == true)|not)
          functionRef:
            refName: createNotification
            arguments:
              title: '"Move2Kube workflow " + $WORKFLOW.instanceId + " failed"'
              message: '"Move2Kube workflow  " + $WORKFLOW.instanceId + " on workspace " + .workspaceId + " and project " + .projectId + " failed with exit message: "+ .exitMessage + "\n\nError: "  + .error'
              origin: "Move2Kube Workflow"
              topic: "Move2Kube Workflow"
    end: true
  - name: PrintExitSuccessMessage
    type: parallel
    branches:
     - name: printSystemOut
       actions:
         - name: printSystemOut
           functionRef:
             refName: systemOut
             arguments:
               message: '${"m2k workflow: " + $WORKFLOW.instanceId + " has finalized successfully}"'
     - name: createNotification
       actions:
         - name: createNotification
           condition: ((has("notificationsDisabled") and .notificationsDisabled != null and .notificationsDisabled == true)|not)
           functionRef:
             refName: createNotification
             arguments:
               title: '"Move2Kube workflow " + $WORKFLOW.instanceId + " success"'
               message: '"Move2Kube workflow  " + $WORKFLOW.instanceId + " on workspace " + .workspaceId + " and project " + .projectId + " was successful; the output is available in the branch " + .targetBranch + " of your git repository "+ .repositoryURL"'
               origin: "Move2Kube Workflow"
               topic: "Move2Kube Workflow"
    end: true
