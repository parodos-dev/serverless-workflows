specVersion: "0.8"
id: mtv-plan
version: "1.0"
name: MTV plan assessment workflow
description: assessment creates a plan and waits for it to be ready or failed
annotations:
  - "workflow-type/assessment"
dataInputSchema: schemas/mtv-input.json
extensions:
  - extensionid: workflow-uri-definitions
    definitions:
      notifications: "https://raw.githubusercontent.com/parodos-dev/serverless-workflows/main/shared/specs/notifications-openapi.yaml"
  - extensionid: workflow-output-schema
    outputSchema: schemas/workflow-output-schema.json
start: CreatePlan
functions:
  - name: createNotification
    operation: notifications#createNotification
  - name: createPlan
    type: rest
    operation: "specs/mtv.yaml#createPlan"
  - name: getPlan
    type: rest
    operation: "specs/mtv.yaml#getPlan"
  - name: getPlanError
    type: expression
    operation: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical"))[0].message
states:
  - name: CreatePlan
    type: operation
    actions:
      - functionRef:
          refName: createPlan
          arguments:
            namespace: .migrationNamespace
            apiVersion: "forklift.konveyor.io/v1beta1"
            kind: Plan
            metadata:
              name: .migrationName
              namespace: .migrationNamespace
            spec:
              map:
                network:
                  name: .networkMap
                  namespace: .migrationNamespace
                storage:
                  name: .storageMap
                  namespace: .migrationNamespace
              provider:
                destination:
                  name: .destinationProvider
                  namespace: .migrationNamespace
                source:
                  name: .sourceProvider
                  namespace: .migrationNamespace
              targetNamespace: .migrationNamespace
              vms: .vms
    transition: GetPlan
  - name: GetPlan
    type: operation
    actions:
      - name: getPlan
        actionDataFilter:
          toStateData: .getStatusResult
        functionRef:
          refName: getPlan
          arguments:
            namespace: .migrationNamespace
            plan: .migrationName
        sleep:
          before: PT10S
    transition: CheckPlanStatus
  - name: CheckPlanStatus
    type: switch
    dataConditions:
      - name: PlanFailure
        condition: .getStatusResult.status.conditions | map(select(.category == "Error" or .category == "Critical")) | length > 0
        transition: PlanFailure
      - name: PlanReady
        condition: .getStatusResult.status.conditions | map(select(.type == "Ready")) | length > 0
        transition: PlanReady
    defaultCondition:
      transition:
        nextState: GetPlan
  - name: PlanFailure
    type: operation
    actions:
      - name: setPlanErrorMessage
        actionDataFilter:
          toStateData: .planErrorMessage
        functionRef:
          refName: getPlanError
      - name: createNotification
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: "MTV plan is not ready for migration"
              description: '"MTV plan " + .migrationName + " is not ready for migration. Error: " + .planErrorMessage'
              topic: "MTV plan assessment workflow"
              severity: "critical"
    stateDataFilter:
      output: '{result: {completedWith: "error", message: .planErrorMessage}}'
    end: true
  - name: PlanReady
    type: operation
    actions:
      - name: createNotification
        functionRef:
          refName: createNotification
          arguments:
            recipients:
              type: "entity"
              entityRef: .recipients
            payload:
              title: "MTV plan is ready for migration"
              description: '"MTV plan " + .migrationName + " is ready for migration"'
              topic: "MTV plan assessment workflow"
              severity: "normal"
    stateDataFilter:
      output: '{result: {completedWith: "success", message: "MTV plan successful", "nextWorkflows": [{id: "mtv-migration", name: "MTV migration workflow"}], "outputs": [] }}'
    end: true
